
M2S010_I2C_UART_MSS_CM3_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .vector_table 00000190  00000000  00000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .boot_code    00000330  00000190  00000190  00008190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000014c0  000004c0  000004c0  000084c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000030  20000000  00001980  00010000  2**4
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000001b0  20000030  000019b0  00010030  2**4
                  ALLOC
  5 .heap         0000ee20  200001e0  000019b0  000101e0  2**4
                  ALLOC
  6 .stack        00001000  2000f000  000019b0  00017000  2**4
                  ALLOC
  7 .comment      000000d7  00000000  00000000  00010030  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000360  00000000  00000000  00010107  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000009b0  00000000  00000000  00010467  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00005e13  00000000  00000000  00010e17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000af1  00000000  00000000  00016c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000199b  00000000  00000000  0001771b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000008cc  00000000  00000000  000190b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000024bd  00000000  00000000  00019984  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001576  00000000  00000000  0001be41  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .ARM.attributes 00000025  00000000  00000000  0001d3b7  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 00001058  00000000  00000000  0001d3dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .vector_table:

00000000 <__vector_table_start>:
 * Close a file.
 */
int _close(int file)
{
    return -1;
}
   0:	20010000 	.word	0x20010000
    uint8_t line_config,
    mss_uart_rzi_polarity_t rxpol,
    mss_uart_rzi_polarity_t txpol,
    mss_uart_rzi_pulsewidth_t pw
)
{
   4:	00000191 	.word	0x00000191

    /* Perform generic initialization */
    global_init(this_uart, baud_rate, line_config);

     /* Enable LIN mode */
    set_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
   8:	0000037f 	.word	0x0000037f

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(rx_buff != ((uint8_t *)0));
    ASSERT(buff_size > 0u);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
   c:	00000381 	.word	0x00000381
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
  10:	00000383 	.word	0x00000383
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(pbuff != ((uint8_t *)0));
    ASSERT(tx_size > 0u);

    if((tx_size > 0u) && ( pbuff != ((uint8_t *)0)) &&
  14:	00000385 	.word	0x00000385
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        if((TX_COMPLETE == this_uart->tx_buff_size) &&
  18:	00000387 	.word	0x00000387
	...
  2c:	00000389 	.word	0x00000389
         * bit 5 - NACK / ERR signal interrupt
         * bit 6 - PID parity error interrupt 
         * bit 7 - LIN break detection interrupt
         * bit 8 - LIN Sync detection interrupt
         */
        this_uart->hw_reg->IEM |= (uint8_t)(~(((uint32_t)irq_mask & ~((uint32_t)IIRF_MASK)) >> 8u));
  30:	0000038b 	.word	0x0000038b
        this_uart->tx_buffer = pbuff;
        this_uart->tx_buff_size = tx_size;
        this_uart->tx_idx = (uint16_t)0;

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ(this_uart->irqn);
  34:	00000000 	.word	0x00000000
        {
            /* Wait until TX FIFO is empty. */
            do {
                status = this_uart->hw_reg->LSR;
                this_uart->status |= status;
            } while (0u == (status & MSS_UART_THRE));
  38:	0000038d 	.word	0x0000038d
    ASSERT(buff_size > 0u);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
  3c:	0000038f 	.word	0x0000038f

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0u;
            while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
  40:	00000391 	.word	0x00000391

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while(0u != data_byte)
  44:	00000393 	.word	0x00000393

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  48:	00000395 	.word	0x00000395

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0u;
            while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
  4c:	00000397 	.word	0x00000397
            /* Fill up FIFO */
            for(size_sent = 0u; size_sent < fill_size; ++size_sent)
            {

                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = tx_buffer[size_sent];
  50:	00001515 	.word	0x00001515
              (rx_size < buff_size))
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
            ++rx_size;
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
  54:	0000039b 	.word	0x0000039b
             */
            fill_size = 0u;
            while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
  58:	0000039d 	.word	0x0000039d
                ++fill_size;
                char_idx++;
                /* Get the next data byte from the input buffer */
                data_byte = p_sz_string[char_idx];
  5c:	00001535 	.word	0x00001535
            fill_size = 0u;
            while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
                ++fill_size;
  60:	000003a1 	.word	0x000003a1

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0u;
            while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
  64:	000003a3 	.word	0x000003a3
    if((tx_size > 0u) && ( pbuff != ((uint8_t *)0)) &&
      ((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)))
    {
        /*Initialise the transmit info for the UART instance with the arguments.*/
        this_uart->tx_buffer = pbuff;
        this_uart->tx_buff_size = tx_size;
  68:	00000a21 	.word	0x00000a21
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while(((status & MSS_UART_DATA_READY) != 0u) &&
  6c:	00000a01 	.word	0x00000a01
  70:	000003a9 	.word	0x000003a9

        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ(this_uart->irqn);

        /* assign default handler for data transfer */
        this_uart->tx_handler = default_tx_handler;
  74:	000003ab 	.word	0x000003ab
  78:	000003ad 	.word	0x000003ad
      ((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)))
    {
        /*Initialise the transmit info for the UART instance with the arguments.*/
        this_uart->tx_buffer = pbuff;
        this_uart->tx_buff_size = tx_size;
        this_uart->tx_idx = (uint16_t)0;
  7c:	000003af 	.word	0x000003af

    if((tx_size > 0u) && ( pbuff != ((uint8_t *)0)) &&
      ((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)))
    {
        /*Initialise the transmit info for the UART instance with the arguments.*/
        this_uart->tx_buffer = pbuff;
  80:	000003b1 	.word	0x000003b1
            /* Fill up FIFO */
            for(size_sent = 0u; size_sent < fill_size; ++size_sent)
            {

                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = tx_buffer[size_sent];
  84:	000003b3 	.word	0x000003b3
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
  88:	000003b5 	.word	0x000003b5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  8c:	000003b7 	.word	0x000003b7
  90:	000003b9 	.word	0x000003b9
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
        stat_ctrl = this_i2c->hw_reg->STATUS;
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
  94:	000003bb 	.word	0x000003bb

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  98:	000003bd 	.word	0x000003bd
  9c:	000003bf 	.word	0x000003bf
  a0:	000003c1 	.word	0x000003c1
  a4:	000003c3 	.word	0x000003c3
  a8:	000003c5 	.word	0x000003c5
  ac:	000003c7 	.word	0x000003c7
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
  b0:	000003c9 	.word	0x000003c9
                                      
    ((pw == MSS_UART_3_BY_16) ? clear_bit_reg8(&this_uart->hw_reg->MM1,EITP) : 
                                      set_bit_reg8(&this_uart->hw_reg->MM1,EITP));
    /* Disable SmartCard Mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
}
  b4:	000003cb 	.word	0x000003cb
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
  b8:	000003cd 	.word	0x000003cd
  bc:	000003cf 	.word	0x000003cf
  c0:	000003d1 	.word	0x000003d1
  c4:	000003d3 	.word	0x000003d3
  c8:	000003d5 	.word	0x000003d5
  cc:	000003d7 	.word	0x000003d7
                                      set_bit_reg8(&this_uart->hw_reg->MM1,EIRX));
                                      
    ((txpol == MSS_UART_ACTIVE_LOW) ? clear_bit_reg8(&this_uart->hw_reg->MM1,EITX) : 
                                      set_bit_reg8(&this_uart->hw_reg->MM1,EITX));
                                      
    ((pw == MSS_UART_3_BY_16) ? clear_bit_reg8(&this_uart->hw_reg->MM1,EITP) : 
  d0:	000003d9 	.word	0x000003d9
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
  d4:	000003db 	.word	0x000003db
  d8:	000003dd 	.word	0x000003dd
  dc:	000003df 	.word	0x000003df
  e0:	000003e1 	.word	0x000003e1
  e4:	000003e3 	.word	0x000003e3
  e8:	000003e5 	.word	0x000003e5
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
  ec:	000003e7 	.word	0x000003e7
  f0:	000003e9 	.word	0x000003e9
  f4:	000003eb 	.word	0x000003eb
  f8:	000003ed 	.word	0x000003ed
  fc:	000003ef 	.word	0x000003ef
 100:	000003f1 	.word	0x000003f1
 104:	000003f3 	.word	0x000003f3
 108:	000003f5 	.word	0x000003f5
 10c:	000003f7 	.word	0x000003f7
 110:	000003f9 	.word	0x000003f9
 114:	000003fb 	.word	0x000003fb
 118:	000003fd 	.word	0x000003fd
 11c:	000003ff 	.word	0x000003ff
 120:	00000401 	.word	0x00000401
 124:	00000403 	.word	0x00000403
 128:	00000405 	.word	0x00000405
 12c:	00000407 	.word	0x00000407
 130:	00000409 	.word	0x00000409
 134:	0000040b 	.word	0x0000040b
 138:	0000040d 	.word	0x0000040d
 13c:	0000040f 	.word	0x0000040f
 140:	00000411 	.word	0x00000411
 144:	00000413 	.word	0x00000413
 148:	00000415 	.word	0x00000415
 14c:	00000417 	.word	0x00000417
 150:	00000419 	.word	0x00000419
 154:	0000041b 	.word	0x0000041b
 158:	0000041d 	.word	0x0000041d
 15c:	0000041f 	.word	0x0000041f
 160:	00000421 	.word	0x00000421
 164:	00000423 	.word	0x00000423
 168:	00000425 	.word	0x00000425
 16c:	00000427 	.word	0x00000427
 170:	00000429 	.word	0x00000429
 174:	0000042b 	.word	0x0000042b
 178:	0000042d 	.word	0x0000042d
 17c:	0000042f 	.word	0x0000042f
 180:	00000431 	.word	0x00000431
 184:	00000433 	.word	0x00000433
	...

Disassembly of section .boot_code:

00000190 <Reset_Handler>:
 190:	f04f 0b00 	mov.w	fp, #0
 194:	f8df 02be 	ldr.w	r0, [pc, #702]	; 456 <SF2_MDDR_MODE_CR>
 198:	6800      	ldr	r0, [r0, #0]
 19a:	f8df 12b6 	ldr.w	r1, [pc, #694]	; 452 <SF2_EDAC_CR>
 19e:	6809      	ldr	r1, [r1, #0]
 1a0:	f001 0103 	and.w	r1, r1, #3
 1a4:	f000 001c 	and.w	r0, r0, #28
 1a8:	2814      	cmp	r0, #20
 1aa:	d101      	bne.n	1b0 <check_esram_edac>
 1ac:	f04b 0b02 	orr.w	fp, fp, #2

000001b0 <check_esram_edac>:
 1b0:	2900      	cmp	r1, #0
 1b2:	d001      	beq.n	1b8 <check_stack_init>
 1b4:	f04b 0b01 	orr.w	fp, fp, #1

000001b8 <check_stack_init>:
 1b8:	f1bb 0f00 	cmp.w	fp, #0
 1bc:	d005      	beq.n	1ca <system_init>

000001be <clear_stack>:
 1be:	48a7      	ldr	r0, [pc, #668]	; (45c <SF2_MDDR_MODE_CR+0x6>)
 1c0:	49a7      	ldr	r1, [pc, #668]	; (460 <SF2_MDDR_MODE_CR+0xa>)
 1c2:	f8df 2272 	ldr.w	r2, [pc, #626]	; 436 <RAM_INIT_PATTERN>
 1c6:	f000 f89f 	bl	308 <fill_memory>

000001ca <system_init>:
 1ca:	48a6      	ldr	r0, [pc, #664]	; (464 <SF2_MDDR_MODE_CR+0xe>)
 1cc:	4780      	blx	r0
 1ce:	f00b 0a02 	and.w	sl, fp, #2
 1d2:	f1ba 0f00 	cmp.w	sl, #0
 1d6:	d00c      	beq.n	1f2 <remap_memory>
 1d8:	f8df 026e 	ldr.w	r0, [pc, #622]	; 44a <SF2_DDRB_NB_SIZE>
 1dc:	f8df 126e 	ldr.w	r1, [pc, #622]	; 44e <SF2_DDRB_CR>
 1e0:	6802      	ldr	r2, [r0, #0]
 1e2:	680b      	ldr	r3, [r1, #0]
 1e4:	b40f      	push	{r0, r1, r2, r3}
 1e6:	f04f 0200 	mov.w	r2, #0
 1ea:	f04f 03ff 	mov.w	r3, #255	; 0xff
 1ee:	6002      	str	r2, [r0, #0]
 1f0:	600b      	str	r3, [r1, #0]

000001f2 <remap_memory>:
 1f2:	489d      	ldr	r0, [pc, #628]	; (468 <SF2_MDDR_MODE_CR+0x12>)
 1f4:	4a9d      	ldr	r2, [pc, #628]	; (46c <SF2_MDDR_MODE_CR+0x16>)
 1f6:	4b9e      	ldr	r3, [pc, #632]	; (470 <SF2_MDDR_MODE_CR+0x1a>)
 1f8:	2802      	cmp	r0, #2
 1fa:	d108      	bne.n	20e <check_esram_remap>
 1fc:	f8df 123e 	ldr.w	r1, [pc, #574]	; 43e <SF2_ESRAM_CR>
 200:	600a      	str	r2, [r1, #0]
 202:	f8df 1242 	ldr.w	r1, [pc, #578]	; 446 <SF2_ENVM_REMAP_CR>
 206:	600a      	str	r2, [r1, #0]
 208:	f8df 1236 	ldr.w	r1, [pc, #566]	; 442 <SF2_DDR_CR>
 20c:	600b      	str	r3, [r1, #0]

0000020e <check_esram_remap>:
 20e:	2801      	cmp	r0, #1
 210:	d108      	bne.n	224 <check_mirrored_nvm>
 212:	f8df 122e 	ldr.w	r1, [pc, #558]	; 442 <SF2_DDR_CR>
 216:	600a      	str	r2, [r1, #0]
 218:	f8df 122a 	ldr.w	r1, [pc, #554]	; 446 <SF2_ENVM_REMAP_CR>
 21c:	600a      	str	r2, [r1, #0]
 21e:	f8df 121e 	ldr.w	r1, [pc, #542]	; 43e <SF2_ESRAM_CR>
 222:	600b      	str	r3, [r1, #0]

00000224 <check_mirrored_nvm>:
 224:	4893      	ldr	r0, [pc, #588]	; (474 <SF2_MDDR_MODE_CR+0x1e>)
 226:	2800      	cmp	r0, #0
 228:	d109      	bne.n	23e <copy_data>
 22a:	4893      	ldr	r0, [pc, #588]	; (478 <SF2_MDDR_MODE_CR+0x22>)
 22c:	4993      	ldr	r1, [pc, #588]	; (47c <SF2_MDDR_MODE_CR+0x26>)
 22e:	4a94      	ldr	r2, [pc, #592]	; (480 <SF2_MDDR_MODE_CR+0x2a>)
 230:	f000 f832 	bl	298 <block_copy>

00000234 <copy_text>:
 234:	4893      	ldr	r0, [pc, #588]	; (484 <SF2_MDDR_MODE_CR+0x2e>)
 236:	4994      	ldr	r1, [pc, #592]	; (488 <SF2_MDDR_MODE_CR+0x32>)
 238:	4a94      	ldr	r2, [pc, #592]	; (48c <SF2_MDDR_MODE_CR+0x36>)
 23a:	f000 f82d 	bl	298 <block_copy>

0000023e <copy_data>:
 23e:	4894      	ldr	r0, [pc, #592]	; (490 <SF2_MDDR_MODE_CR+0x3a>)
 240:	4994      	ldr	r1, [pc, #592]	; (494 <SF2_MDDR_MODE_CR+0x3e>)
 242:	4a95      	ldr	r2, [pc, #596]	; (498 <SF2_MDDR_MODE_CR+0x42>)
 244:	f000 f828 	bl	298 <block_copy>

00000248 <clear_bss>:
 248:	4894      	ldr	r0, [pc, #592]	; (49c <SF2_MDDR_MODE_CR+0x46>)
 24a:	4995      	ldr	r1, [pc, #596]	; (4a0 <SF2_MDDR_MODE_CR+0x4a>)
 24c:	f8df 21e6 	ldr.w	r2, [pc, #486]	; 436 <RAM_INIT_PATTERN>
 250:	f000 f85a 	bl	308 <fill_memory>

00000254 <clear_heap>:
 254:	f1bb 0f00 	cmp.w	fp, #0
 258:	d012      	beq.n	280 <call_glob_ctor>
 25a:	4892      	ldr	r0, [pc, #584]	; (4a4 <SF2_MDDR_MODE_CR+0x4e>)
 25c:	4992      	ldr	r1, [pc, #584]	; (4a8 <SF2_MDDR_MODE_CR+0x52>)
 25e:	f8df 21da 	ldr.w	r2, [pc, #474]	; 43a <HEAP_INIT_PATTERN>
 262:	f000 f851 	bl	308 <fill_memory>
 266:	f00b 0a02 	and.w	sl, fp, #2
 26a:	f1ba 0f00 	cmp.w	sl, #0
 26e:	d007      	beq.n	280 <call_glob_ctor>
 270:	bc0f      	pop	{r0, r1, r2, r3}
 272:	6002      	str	r2, [r0, #0]
 274:	600b      	str	r3, [r1, #0]
 276:	bf00      	nop
 278:	f3af 8000 	nop.w
 27c:	f3af 8000 	nop.w

00000280 <call_glob_ctor>:
 280:	f8df 0228 	ldr.w	r0, [pc, #552]	; 4ac <SF2_MDDR_MODE_CR+0x56>
 284:	f20f 0e03 	addw	lr, pc, #3
 288:	4700      	bx	r0

0000028a <branch_to_main>:
 28a:	f04f 0000 	mov.w	r0, #0
 28e:	f04f 0100 	mov.w	r1, #0
 292:	f8df f21c 	ldr.w	pc, [pc, #540]	; 4b0 <SF2_MDDR_MODE_CR+0x5a>

00000296 <ExitLoop>:
 296:	e7fe      	b.n	296 <ExitLoop>

00000298 <block_copy>:
 298:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
 29c:	4288      	cmp	r0, r1
 29e:	d025      	beq.n	2ec <block_copy_exit>
 2a0:	ebb2 0201 	subs.w	r2, r2, r1
 2a4:	d500      	bpl.n	2a8 <block_copy_address_ok>
 2a6:	e7fe      	b.n	2a6 <block_copy+0xe>

000002a8 <block_copy_address_ok>:
 2a8:	ea40 0301 	orr.w	r3, r0, r1
 2ac:	f013 0303 	ands.w	r3, r3, #3
 2b0:	d002      	beq.n	2b8 <block_copy_continue>

000002b2 <block_copy_byte_copy>:
 2b2:	f000 f81d 	bl	2f0 <block_copy_byte>
 2b6:	e019      	b.n	2ec <block_copy_exit>

000002b8 <block_copy_continue>:
 2b8:	f04f 0300 	mov.w	r3, #0
 2bc:	4690      	mov	r8, r2
 2be:	1112      	asrs	r2, r2, #4
 2c0:	d0f7      	beq.n	2b2 <block_copy_byte_copy>

000002c2 <block_copy_loop>:
 2c2:	429a      	cmp	r2, r3
 2c4:	bf1c      	itt	ne
 2c6:	c8f0      	ldmiane	r0!, {r4, r5, r6, r7}
 2c8:	c1f0      	stmiane	r1!, {r4, r5, r6, r7}
 2ca:	f103 0301 	add.w	r3, r3, #1
 2ce:	d1f8      	bne.n	2c2 <block_copy_loop>
 2d0:	f008 080f 	and.w	r8, r8, #15
 2d4:	f1b8 0f00 	cmp.w	r8, #0
 2d8:	d008      	beq.n	2ec <block_copy_exit>

000002da <copy_spare_bytes>:
 2da:	7804      	ldrb	r4, [r0, #0]
 2dc:	700c      	strb	r4, [r1, #0]
 2de:	f100 0001 	add.w	r0, r0, #1
 2e2:	f101 0101 	add.w	r1, r1, #1
 2e6:	f1b8 0801 	subs.w	r8, r8, #1
 2ea:	d1f6      	bne.n	2da <copy_spare_bytes>

000002ec <block_copy_exit>:
 2ec:	e8bd 81f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, pc}

000002f0 <block_copy_byte>:
 2f0:	b508      	push	{r3, lr}
 2f2:	f04f 0300 	mov.w	r3, #0

000002f6 <block_copy_byte_loop>:
 2f6:	7803      	ldrb	r3, [r0, #0]
 2f8:	700b      	strb	r3, [r1, #0]
 2fa:	f100 0001 	add.w	r0, r0, #1
 2fe:	f101 0101 	add.w	r1, r1, #1
 302:	3a01      	subs	r2, #1
 304:	d1f7      	bne.n	2f6 <block_copy_byte_loop>
 306:	bd08      	pop	{r3, pc}

00000308 <fill_memory>:
 308:	4288      	cmp	r0, r1
 30a:	d037      	beq.n	37c <fill_memory_exit>
 30c:	f000 0603 	and.w	r6, r0, #3
 310:	2e00      	cmp	r6, #0
 312:	d014      	beq.n	33e <fill_memory_end_start>
 314:	f04f 0504 	mov.w	r5, #4
 318:	eba5 0406 	sub.w	r4, r5, r6
 31c:	f04f 0708 	mov.w	r7, #8
 320:	fb07 f806 	mul.w	r8, r7, r6
 324:	4691      	mov	r9, r2
 326:	fa69 f908 	ror.w	r9, r9, r8

0000032a <fill_memory_spare_bytes_start>:
 32a:	2c00      	cmp	r4, #0
 32c:	d007      	beq.n	33e <fill_memory_end_start>
 32e:	f880 9000 	strb.w	r9, [r0]
 332:	fa69 f907 	ror.w	r9, r9, r7
 336:	f100 0001 	add.w	r0, r0, #1
 33a:	3c01      	subs	r4, #1
 33c:	e7f5      	b.n	32a <fill_memory_spare_bytes_start>

0000033e <fill_memory_end_start>:
 33e:	f04f 0600 	mov.w	r6, #0
 342:	460f      	mov	r7, r1
 344:	1a09      	subs	r1, r1, r0
 346:	4688      	mov	r8, r1
 348:	1109      	asrs	r1, r1, #4
 34a:	4691      	mov	r9, r2
 34c:	4614      	mov	r4, r2
 34e:	4615      	mov	r5, r2
 350:	42b1      	cmp	r1, r6
 352:	d006      	beq.n	362 <fill_memory_spare_bytes_end>

00000354 <fill_memory_loop>:
 354:	bf18      	it	ne
 356:	e8a0 0234 	stmiane.w	r0!, {r2, r4, r5, r9}
 35a:	f106 0601 	add.w	r6, r6, #1
 35e:	42b1      	cmp	r1, r6
 360:	d1f8      	bne.n	354 <fill_memory_loop>

00000362 <fill_memory_spare_bytes_end>:
 362:	f008 080f 	and.w	r8, r8, #15

00000366 <fill_memory_spare_end_loop>:
 366:	f1b8 0f00 	cmp.w	r8, #0
 36a:	d007      	beq.n	37c <fill_memory_exit>
 36c:	7002      	strb	r2, [r0, #0]
 36e:	ea4f 2232 	mov.w	r2, r2, ror #8
 372:	f100 0001 	add.w	r0, r0, #1
 376:	f1b8 0801 	subs.w	r8, r8, #1
 37a:	e7f4      	b.n	366 <fill_memory_spare_end_loop>

0000037c <fill_memory_exit>:
 37c:	4770      	bx	lr

0000037e <NMI_Handler>:
 37e:	e7fe      	b.n	37e <NMI_Handler>

00000380 <HardFault_Handler>:
 380:	e7fe      	b.n	380 <HardFault_Handler>

00000382 <MemManage_Handler>:
 382:	e7fe      	b.n	382 <MemManage_Handler>

00000384 <BusFault_Handler>:
 384:	e7fe      	b.n	384 <BusFault_Handler>

00000386 <UsageFault_Handler>:
 386:	e7fe      	b.n	386 <UsageFault_Handler>

00000388 <SVC_Handler>:
 388:	e7fe      	b.n	388 <SVC_Handler>

0000038a <DebugMon_Handler>:
 38a:	e7fe      	b.n	38a <DebugMon_Handler>

0000038c <PendSV_Handler>:
 38c:	e7fe      	b.n	38c <PendSV_Handler>

0000038e <SysTick_Handler>:
 38e:	e7fe      	b.n	38e <SysTick_Handler>

00000390 <WdogWakeup_IRQHandler>:
 390:	e7fe      	b.n	390 <WdogWakeup_IRQHandler>

00000392 <RTC_Wakeup_IRQHandler>:
 392:	e7fe      	b.n	392 <RTC_Wakeup_IRQHandler>

00000394 <SPI0_IRQHandler>:
 394:	e7fe      	b.n	394 <SPI0_IRQHandler>

00000396 <SPI1_IRQHandler>:
 396:	e7fe      	b.n	396 <SPI1_IRQHandler>
 398:	e7fe      	b.n	398 <SPI1_IRQHandler+0x2>

0000039a <I2C0_SMBAlert_IRQHandler>:
 39a:	e7fe      	b.n	39a <I2C0_SMBAlert_IRQHandler>

0000039c <I2C0_SMBus_IRQHandler>:
 39c:	e7fe      	b.n	39c <I2C0_SMBus_IRQHandler>
 39e:	e7fe      	b.n	39e <I2C0_SMBus_IRQHandler+0x2>

000003a0 <I2C1_SMBAlert_IRQHandler>:
 3a0:	e7fe      	b.n	3a0 <I2C1_SMBAlert_IRQHandler>

000003a2 <I2C1_SMBus_IRQHandler>:
 3a2:	e7fe      	b.n	3a2 <I2C1_SMBus_IRQHandler>
 3a4:	e7fe      	b.n	3a4 <I2C1_SMBus_IRQHandler+0x2>
 3a6:	e7fe      	b.n	3a6 <I2C1_SMBus_IRQHandler+0x4>

000003a8 <EthernetMAC_IRQHandler>:
 3a8:	e7fe      	b.n	3a8 <EthernetMAC_IRQHandler>

000003aa <DMA_IRQHandler>:
 3aa:	e7fe      	b.n	3aa <DMA_IRQHandler>

000003ac <Timer1_IRQHandler>:
 3ac:	e7fe      	b.n	3ac <Timer1_IRQHandler>

000003ae <Timer2_IRQHandler>:
 3ae:	e7fe      	b.n	3ae <Timer2_IRQHandler>

000003b0 <CAN_IRQHandler>:
 3b0:	e7fe      	b.n	3b0 <CAN_IRQHandler>

000003b2 <ENVM0_IRQHandler>:
 3b2:	e7fe      	b.n	3b2 <ENVM0_IRQHandler>

000003b4 <ENVM1_IRQHandler>:
 3b4:	e7fe      	b.n	3b4 <ENVM1_IRQHandler>

000003b6 <ComBlk_IRQHandler>:
 3b6:	e7fe      	b.n	3b6 <ComBlk_IRQHandler>

000003b8 <USB_IRQHandler>:
 3b8:	e7fe      	b.n	3b8 <USB_IRQHandler>

000003ba <USB_DMA_IRQHandler>:
 3ba:	e7fe      	b.n	3ba <USB_DMA_IRQHandler>

000003bc <PLL_Lock_IRQHandler>:
 3bc:	e7fe      	b.n	3bc <PLL_Lock_IRQHandler>

000003be <PLL_LockLost_IRQHandler>:
 3be:	e7fe      	b.n	3be <PLL_LockLost_IRQHandler>

000003c0 <CommSwitchError_IRQHandler>:
 3c0:	e7fe      	b.n	3c0 <CommSwitchError_IRQHandler>

000003c2 <CacheError_IRQHandler>:
 3c2:	e7fe      	b.n	3c2 <CacheError_IRQHandler>

000003c4 <DDR_IRQHandler>:
 3c4:	e7fe      	b.n	3c4 <DDR_IRQHandler>

000003c6 <HPDMA_Complete_IRQHandler>:
 3c6:	e7fe      	b.n	3c6 <HPDMA_Complete_IRQHandler>

000003c8 <HPDMA_Error_IRQHandler>:
 3c8:	e7fe      	b.n	3c8 <HPDMA_Error_IRQHandler>

000003ca <ECC_Error_IRQHandler>:
 3ca:	e7fe      	b.n	3ca <ECC_Error_IRQHandler>

000003cc <MDDR_IOCalib_IRQHandler>:
 3cc:	e7fe      	b.n	3cc <MDDR_IOCalib_IRQHandler>

000003ce <FAB_PLL_Lock_IRQHandler>:
 3ce:	e7fe      	b.n	3ce <FAB_PLL_Lock_IRQHandler>

000003d0 <FAB_PLL_LockLost_IRQHandler>:
 3d0:	e7fe      	b.n	3d0 <FAB_PLL_LockLost_IRQHandler>

000003d2 <FIC64_IRQHandler>:
 3d2:	e7fe      	b.n	3d2 <FIC64_IRQHandler>

000003d4 <FabricIrq0_IRQHandler>:
 3d4:	e7fe      	b.n	3d4 <FabricIrq0_IRQHandler>

000003d6 <FabricIrq1_IRQHandler>:
 3d6:	e7fe      	b.n	3d6 <FabricIrq1_IRQHandler>

000003d8 <FabricIrq2_IRQHandler>:
 3d8:	e7fe      	b.n	3d8 <FabricIrq2_IRQHandler>

000003da <FabricIrq3_IRQHandler>:
 3da:	e7fe      	b.n	3da <FabricIrq3_IRQHandler>

000003dc <FabricIrq4_IRQHandler>:
 3dc:	e7fe      	b.n	3dc <FabricIrq4_IRQHandler>

000003de <FabricIrq5_IRQHandler>:
 3de:	e7fe      	b.n	3de <FabricIrq5_IRQHandler>

000003e0 <FabricIrq6_IRQHandler>:
 3e0:	e7fe      	b.n	3e0 <FabricIrq6_IRQHandler>

000003e2 <FabricIrq7_IRQHandler>:
 3e2:	e7fe      	b.n	3e2 <FabricIrq7_IRQHandler>

000003e4 <FabricIrq8_IRQHandler>:
 3e4:	e7fe      	b.n	3e4 <FabricIrq8_IRQHandler>

000003e6 <FabricIrq9_IRQHandler>:
 3e6:	e7fe      	b.n	3e6 <FabricIrq9_IRQHandler>

000003e8 <FabricIrq10_IRQHandler>:
 3e8:	e7fe      	b.n	3e8 <FabricIrq10_IRQHandler>

000003ea <FabricIrq11_IRQHandler>:
 3ea:	e7fe      	b.n	3ea <FabricIrq11_IRQHandler>

000003ec <FabricIrq12_IRQHandler>:
 3ec:	e7fe      	b.n	3ec <FabricIrq12_IRQHandler>

000003ee <FabricIrq13_IRQHandler>:
 3ee:	e7fe      	b.n	3ee <FabricIrq13_IRQHandler>

000003f0 <FabricIrq14_IRQHandler>:
 3f0:	e7fe      	b.n	3f0 <FabricIrq14_IRQHandler>

000003f2 <FabricIrq15_IRQHandler>:
 3f2:	e7fe      	b.n	3f2 <FabricIrq15_IRQHandler>

000003f4 <GPIO0_IRQHandler>:
 3f4:	e7fe      	b.n	3f4 <GPIO0_IRQHandler>

000003f6 <GPIO1_IRQHandler>:
 3f6:	e7fe      	b.n	3f6 <GPIO1_IRQHandler>

000003f8 <GPIO2_IRQHandler>:
 3f8:	e7fe      	b.n	3f8 <GPIO2_IRQHandler>

000003fa <GPIO3_IRQHandler>:
 3fa:	e7fe      	b.n	3fa <GPIO3_IRQHandler>

000003fc <GPIO4_IRQHandler>:
 3fc:	e7fe      	b.n	3fc <GPIO4_IRQHandler>

000003fe <GPIO5_IRQHandler>:
 3fe:	e7fe      	b.n	3fe <GPIO5_IRQHandler>

00000400 <GPIO6_IRQHandler>:
 400:	e7fe      	b.n	400 <GPIO6_IRQHandler>

00000402 <GPIO7_IRQHandler>:
 402:	e7fe      	b.n	402 <GPIO7_IRQHandler>

00000404 <GPIO8_IRQHandler>:
 404:	e7fe      	b.n	404 <GPIO8_IRQHandler>

00000406 <GPIO9_IRQHandler>:
 406:	e7fe      	b.n	406 <GPIO9_IRQHandler>

00000408 <GPIO10_IRQHandler>:
 408:	e7fe      	b.n	408 <GPIO10_IRQHandler>

0000040a <GPIO11_IRQHandler>:
 40a:	e7fe      	b.n	40a <GPIO11_IRQHandler>

0000040c <GPIO12_IRQHandler>:
 40c:	e7fe      	b.n	40c <GPIO12_IRQHandler>

0000040e <GPIO13_IRQHandler>:
 40e:	e7fe      	b.n	40e <GPIO13_IRQHandler>

00000410 <GPIO14_IRQHandler>:
 410:	e7fe      	b.n	410 <GPIO14_IRQHandler>

00000412 <GPIO15_IRQHandler>:
 412:	e7fe      	b.n	412 <GPIO15_IRQHandler>

00000414 <GPIO16_IRQHandler>:
 414:	e7fe      	b.n	414 <GPIO16_IRQHandler>

00000416 <GPIO17_IRQHandler>:
 416:	e7fe      	b.n	416 <GPIO17_IRQHandler>

00000418 <GPIO18_IRQHandler>:
 418:	e7fe      	b.n	418 <GPIO18_IRQHandler>

0000041a <GPIO19_IRQHandler>:
 41a:	e7fe      	b.n	41a <GPIO19_IRQHandler>

0000041c <GPIO20_IRQHandler>:
 41c:	e7fe      	b.n	41c <GPIO20_IRQHandler>

0000041e <GPIO21_IRQHandler>:
 41e:	e7fe      	b.n	41e <GPIO21_IRQHandler>

00000420 <GPIO22_IRQHandler>:
 420:	e7fe      	b.n	420 <GPIO22_IRQHandler>

00000422 <GPIO23_IRQHandler>:
 422:	e7fe      	b.n	422 <GPIO23_IRQHandler>

00000424 <GPIO24_IRQHandler>:
 424:	e7fe      	b.n	424 <GPIO24_IRQHandler>

00000426 <GPIO25_IRQHandler>:
 426:	e7fe      	b.n	426 <GPIO25_IRQHandler>

00000428 <GPIO26_IRQHandler>:
 428:	e7fe      	b.n	428 <GPIO26_IRQHandler>

0000042a <GPIO27_IRQHandler>:
 42a:	e7fe      	b.n	42a <GPIO27_IRQHandler>

0000042c <GPIO28_IRQHandler>:
 42c:	e7fe      	b.n	42c <GPIO28_IRQHandler>

0000042e <GPIO29_IRQHandler>:
 42e:	e7fe      	b.n	42e <GPIO29_IRQHandler>

00000430 <GPIO30_IRQHandler>:
 430:	e7fe      	b.n	430 <GPIO30_IRQHandler>

00000432 <GPIO31_IRQHandler>:
 432:	e7fe      	b.n	432 <GPIO31_IRQHandler>

00000434 <mscc_post_hw_cfg_init>:
 434:	4770      	bx	lr

00000436 <RAM_INIT_PATTERN>:
 436:	0000      	.short	0x0000
	...

0000043a <HEAP_INIT_PATTERN>:
 43a:	a2a2      	.short	0xa2a2
 43c:	a2a2      	.short	0xa2a2

0000043e <SF2_ESRAM_CR>:
 43e:	8000      	.short	0x8000
 440:	4003      	.short	0x4003

00000442 <SF2_DDR_CR>:
 442:	8008      	.short	0x8008
 444:	4003      	.short	0x4003

00000446 <SF2_ENVM_REMAP_CR>:
 446:	8010      	.short	0x8010
 448:	4003      	.short	0x4003

0000044a <SF2_DDRB_NB_SIZE>:
 44a:	8030      	.short	0x8030
 44c:	4003      	.short	0x4003

0000044e <SF2_DDRB_CR>:
 44e:	8034      	.short	0x8034
 450:	4003      	.short	0x4003

00000452 <SF2_EDAC_CR>:
 452:	8038      	.short	0x8038
 454:	4003      	.short	0x4003

00000456 <SF2_MDDR_MODE_CR>:
 456:	0818      	.short	0x0818
 458:	00004002 	.word	0x00004002
 45c:	2000f000 	.word	0x2000f000
 460:	20010000 	.word	0x20010000
 464:	000017e5 	.word	0x000017e5
	...
 470:	00000001 	.word	0x00000001
	...
 480:	00000190 	.word	0x00000190
 484:	000004c0 	.word	0x000004c0
 488:	000004c0 	.word	0x000004c0
 48c:	00001980 	.word	0x00001980
 490:	00001980 	.word	0x00001980
 494:	20000000 	.word	0x20000000
 498:	20000030 	.word	0x20000030
 49c:	20000030 	.word	0x20000030
 4a0:	200001e0 	.word	0x200001e0
 4a4:	200001e0 	.word	0x200001e0
 4a8:	2000f000 	.word	0x2000f000
 4ac:	00001825 	.word	0x00001825
 4b0:	0000067d 	.word	0x0000067d
 4b4:	f3af 8000 	nop.w
 4b8:	f3af 8000 	nop.w
 4bc:	f3af 8000 	nop.w

Disassembly of section .text:

000004c0 <__do_global_dtors_aux>:
     4c0:	f240 0330 	movw	r3, #48	; 0x30
     4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c8:	781a      	ldrb	r2, [r3, #0]
     4ca:	b90a      	cbnz	r2, 4d0 <__do_global_dtors_aux+0x10>
     4cc:	2001      	movs	r0, #1
     4ce:	7018      	strb	r0, [r3, #0]
     4d0:	4770      	bx	lr
     4d2:	bf00      	nop

000004d4 <frame_dummy>:
     4d4:	f240 0000 	movw	r0, #0
     4d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
     4dc:	b508      	push	{r3, lr}
     4de:	6803      	ldr	r3, [r0, #0]
     4e0:	b12b      	cbz	r3, 4ee <frame_dummy+0x1a>
     4e2:	f240 0300 	movw	r3, #0
     4e6:	f2c0 0300 	movt	r3, #0
     4ea:	b103      	cbz	r3, 4ee <frame_dummy+0x1a>
     4ec:	4798      	blx	r3
     4ee:	bd08      	pop	{r3, pc}

000004f0 <fill_uart_tx_buf>:
     4f0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     4f4:	f240 0334 	movw	r3, #52	; 0x34
     4f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4fc:	7b5c      	ldrb	r4, [r3, #13]
     4fe:	f893 900a 	ldrb.w	r9, [r3, #10]
     502:	b086      	sub	sp, #24
     504:	f893 c006 	ldrb.w	ip, [r3, #6]
     508:	79d8      	ldrb	r0, [r3, #7]
     50a:	f893 a000 	ldrb.w	sl, [r3]
     50e:	f893 8001 	ldrb.w	r8, [r3, #1]
     512:	789f      	ldrb	r7, [r3, #2]
     514:	78de      	ldrb	r6, [r3, #3]
     516:	791d      	ldrb	r5, [r3, #4]
     518:	7a19      	ldrb	r1, [r3, #8]
     51a:	f893 b009 	ldrb.w	fp, [r3, #9]
     51e:	9403      	str	r4, [sp, #12]
     520:	f8cd 9000 	str.w	r9, [sp]
     524:	795c      	ldrb	r4, [r3, #5]
     526:	f893 900b 	ldrb.w	r9, [r3, #11]
     52a:	f240 0260 	movw	r2, #96	; 0x60
     52e:	7b1b      	ldrb	r3, [r3, #12]
     530:	f2c2 0200 	movt	r2, #8192	; 0x2000
     534:	9302      	str	r3, [sp, #8]
     536:	78d3      	ldrb	r3, [r2, #3]
     538:	f8cd 9004 	str.w	r9, [sp, #4]
     53c:	f892 9004 	ldrb.w	r9, [r2, #4]
     540:	9304      	str	r3, [sp, #16]
     542:	f240 0344 	movw	r3, #68	; 0x44
     546:	f2c2 0300 	movt	r3, #8192	; 0x2000
     54a:	f8cd 9014 	str.w	r9, [sp, #20]
     54e:	f04f 090a 	mov.w	r9, #10
     552:	f883 9000 	strb.w	r9, [r3]
     556:	f04f 090d 	mov.w	r9, #13
     55a:	f883 9001 	strb.w	r9, [r3, #1]
     55e:	f883 c008 	strb.w	ip, [r3, #8]
     562:	7258      	strb	r0, [r3, #9]
     564:	f883 a002 	strb.w	sl, [r3, #2]
     568:	f883 8003 	strb.w	r8, [r3, #3]
     56c:	711f      	strb	r7, [r3, #4]
     56e:	715e      	strb	r6, [r3, #5]
     570:	719d      	strb	r5, [r3, #6]
     572:	71dc      	strb	r4, [r3, #7]
     574:	7299      	strb	r1, [r3, #10]
     576:	9900      	ldr	r1, [sp, #0]
     578:	f8dd c004 	ldr.w	ip, [sp, #4]
     57c:	9802      	ldr	r0, [sp, #8]
     57e:	f8dd 900c 	ldr.w	r9, [sp, #12]
     582:	7319      	strb	r1, [r3, #12]
     584:	9904      	ldr	r1, [sp, #16]
     586:	f883 c00d 	strb.w	ip, [r3, #13]
     58a:	7398      	strb	r0, [r3, #14]
     58c:	f892 c008 	ldrb.w	ip, [r2, #8]
     590:	7950      	ldrb	r0, [r2, #5]
     592:	f883 900f 	strb.w	r9, [r3, #15]
     596:	7419      	strb	r1, [r3, #16]
     598:	f8dd 9014 	ldr.w	r9, [sp, #20]
     59c:	7991      	ldrb	r1, [r2, #6]
     59e:	79d2      	ldrb	r2, [r2, #7]
     5a0:	f883 b00b 	strb.w	fp, [r3, #11]
     5a4:	f883 9011 	strb.w	r9, [r3, #17]
     5a8:	f883 c015 	strb.w	ip, [r3, #21]
     5ac:	7498      	strb	r0, [r3, #18]
     5ae:	74d9      	strb	r1, [r3, #19]
     5b0:	751a      	strb	r2, [r3, #20]
     5b2:	b006      	add	sp, #24
     5b4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
     5b8:	4770      	bx	lr
     5ba:	bf00      	nop

000005bc <mss_write_read_transaction>:
     5bc:	b530      	push	{r4, r5, lr}
     5be:	b085      	sub	sp, #20
     5c0:	f8bd 5020 	ldrh.w	r5, [sp, #32]
     5c4:	f240 04f4 	movw	r4, #244	; 0xf4
     5c8:	468e      	mov	lr, r1
     5ca:	4694      	mov	ip, r2
     5cc:	f2c2 0400 	movt	r4, #8192	; 0x2000
     5d0:	9300      	str	r3, [sp, #0]
     5d2:	4601      	mov	r1, r0
     5d4:	9501      	str	r5, [sp, #4]
     5d6:	4620      	mov	r0, r4
     5d8:	4672      	mov	r2, lr
     5da:	4663      	mov	r3, ip
     5dc:	2500      	movs	r5, #0
     5de:	9502      	str	r5, [sp, #8]
     5e0:	f000 fc92 	bl	f08 <MSS_I2C_write_read>
     5e4:	4620      	mov	r0, r4
     5e6:	f640 31b8 	movw	r1, #3000	; 0xbb8
     5ea:	b005      	add	sp, #20
     5ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     5f0:	f000 bcf4 	b.w	fdc <MSS_I2C_wait_complete>

000005f4 <readcompass>:
     5f4:	b510      	push	{r4, lr}
     5f6:	b084      	sub	sp, #16
     5f8:	2300      	movs	r3, #0
     5fa:	a904      	add	r1, sp, #16
     5fc:	f240 045c 	movw	r4, #92	; 0x5c
     600:	f801 3d04 	strb.w	r3, [r1, #-4]!
     604:	f04f 0c0c 	mov.w	ip, #12
     608:	f2c2 0400 	movt	r4, #8192	; 0x2000
     60c:	f240 0360 	movw	r3, #96	; 0x60
     610:	f884 c000 	strb.w	ip, [r4]
     614:	4660      	mov	r0, ip
     616:	240a      	movs	r4, #10
     618:	f2c2 0300 	movt	r3, #8192	; 0x2000
     61c:	2201      	movs	r2, #1
     61e:	9400      	str	r4, [sp, #0]
     620:	f7ff ffcc 	bl	5bc <mss_write_read_transaction>
     624:	b004      	add	sp, #16
     626:	bd10      	pop	{r4, pc}

00000628 <mss_write_transaction>:
     628:	b530      	push	{r4, r5, lr}
     62a:	f240 04f4 	movw	r4, #244	; 0xf4
     62e:	468c      	mov	ip, r1
     630:	f2c2 0400 	movt	r4, #8192	; 0x2000
     634:	b083      	sub	sp, #12
     636:	4613      	mov	r3, r2
     638:	4601      	mov	r1, r0
     63a:	4662      	mov	r2, ip
     63c:	4620      	mov	r0, r4
     63e:	2500      	movs	r5, #0
     640:	9500      	str	r5, [sp, #0]
     642:	f000 fc0b 	bl	e5c <MSS_I2C_write>
     646:	4620      	mov	r0, r4
     648:	f640 31b8 	movw	r1, #3000	; 0xbb8
     64c:	b003      	add	sp, #12
     64e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     652:	f000 bcc3 	b.w	fdc <MSS_I2C_wait_complete>
     656:	bf00      	nop

00000658 <I2C_writeU>:
     658:	b500      	push	{lr}
     65a:	f240 035c 	movw	r3, #92	; 0x5c
     65e:	b083      	sub	sp, #12
     660:	f2c2 0300 	movt	r3, #8192	; 0x2000
     664:	f88d 0004 	strb.w	r0, [sp, #4]
     668:	f88d 1005 	strb.w	r1, [sp, #5]
     66c:	7818      	ldrb	r0, [r3, #0]
     66e:	a901      	add	r1, sp, #4
     670:	2202      	movs	r2, #2
     672:	f7ff ffd9 	bl	628 <mss_write_transaction>
     676:	b003      	add	sp, #12
     678:	bd00      	pop	{pc}
     67a:	bf00      	nop

0000067c <main>:
     67c:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
     680:	f240 05b4 	movw	r5, #180	; 0xb4
     684:	f2c2 0500 	movt	r5, #8192	; 0x2000
     688:	b085      	sub	sp, #20
     68a:	4628      	mov	r0, r5
     68c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     690:	2203      	movs	r2, #3
     692:	f000 fbb3 	bl	dfc <MSS_UART_init>
     696:	f240 0104 	movw	r1, #4
     69a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     69e:	f240 00f4 	movw	r0, #244	; 0xf4
     6a2:	780a      	ldrb	r2, [r1, #0]
     6a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     6a8:	2120      	movs	r1, #32
     6aa:	f240 085c 	movw	r8, #92	; 0x5c
     6ae:	f000 ff51 	bl	1554 <MSS_I2C_init>
     6b2:	f2c2 0800 	movt	r8, #8192	; 0x2000
     6b6:	2102      	movs	r1, #2
     6b8:	2468      	movs	r4, #104	; 0x68
     6ba:	2037      	movs	r0, #55	; 0x37
     6bc:	f888 4000 	strb.w	r4, [r8]
     6c0:	f7ff ffca 	bl	658 <I2C_writeU>
     6c4:	f240 046c 	movw	r4, #108	; 0x6c
     6c8:	f2c2 0400 	movt	r4, #8192	; 0x2000
     6cc:	7020      	strb	r0, [r4, #0]
     6ce:	220c      	movs	r2, #12
     6d0:	200a      	movs	r0, #10
     6d2:	2106      	movs	r1, #6
     6d4:	f888 2000 	strb.w	r2, [r8]
     6d8:	f7ff ffbe 	bl	658 <I2C_writeU>
     6dc:	f240 0631 	movw	r6, #49	; 0x31
     6e0:	2300      	movs	r3, #0
     6e2:	f2c2 0600 	movt	r6, #8192	; 0x2000
     6e6:	f240 0770 	movw	r7, #112	; 0x70
     6ea:	7033      	strb	r3, [r6, #0]
     6ec:	682b      	ldr	r3, [r5, #0]
     6ee:	7020      	strb	r0, [r4, #0]
     6f0:	f2c2 0700 	movt	r7, #8192	; 0x2000
     6f4:	f893 c014 	ldrb.w	ip, [r3, #20]
     6f8:	f01c 0f01 	tst.w	ip, #1
     6fc:	d0fa      	beq.n	6f4 <main+0x78>
     6fe:	2200      	movs	r2, #0
     700:	f893 a000 	ldrb.w	sl, [r3]
     704:	682b      	ldr	r3, [r5, #0]
     706:	f802 a007 	strb.w	sl, [r2, r7]
     70a:	7d18      	ldrb	r0, [r3, #20]
     70c:	f240 0170 	movw	r1, #112	; 0x70
     710:	f240 0ab4 	movw	sl, #180	; 0xb4
     714:	3201      	adds	r2, #1
     716:	f010 0f01 	tst.w	r0, #1
     71a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     71e:	f2c2 0a00 	movt	sl, #8192	; 0x2000
     722:	d1ed      	bne.n	700 <main+0x84>
     724:	2a00      	cmp	r2, #0
     726:	d0e5      	beq.n	6f4 <main+0x78>
     728:	f891 e000 	ldrb.w	lr, [r1]
     72c:	f1be 0f77 	cmp.w	lr, #119	; 0x77
     730:	d003      	beq.n	73a <main+0xbe>
     732:	2000      	movs	r0, #0
     734:	b005      	add	sp, #20
     736:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
     73a:	f240 0344 	movw	r3, #68	; 0x44
     73e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     742:	f04f 0c79 	mov.w	ip, #121	; 0x79
     746:	2201      	movs	r2, #1
     748:	4619      	mov	r1, r3
     74a:	4650      	mov	r0, sl
     74c:	f883 c000 	strb.w	ip, [r3]
     750:	f000 f852 	bl	7f8 <MSS_UART_polled_tx>
     754:	f8da 2000 	ldr.w	r2, [sl]
     758:	2300      	movs	r3, #0
     75a:	7d10      	ldrb	r0, [r2, #20]
     75c:	f010 0f01 	tst.w	r0, #1
     760:	d134      	bne.n	7cc <main+0x150>
     762:	2b00      	cmp	r3, #0
     764:	d0f8      	beq.n	758 <main+0xdc>
     766:	783b      	ldrb	r3, [r7, #0]
     768:	2b73      	cmp	r3, #115	; 0x73
     76a:	d040      	beq.n	7ee <main+0x172>
     76c:	7832      	ldrb	r2, [r6, #0]
     76e:	2a01      	cmp	r2, #1
     770:	d1df      	bne.n	732 <main+0xb6>
     772:	f10d 0a0c 	add.w	sl, sp, #12
     776:	2768      	movs	r7, #104	; 0x68
     778:	263b      	movs	r6, #59	; 0x3b
     77a:	250e      	movs	r5, #14
     77c:	f240 0334 	movw	r3, #52	; 0x34
     780:	f2c2 0300 	movt	r3, #8192	; 0x2000
     784:	4651      	mov	r1, sl
     786:	2201      	movs	r2, #1
     788:	2068      	movs	r0, #104	; 0x68
     78a:	f888 7000 	strb.w	r7, [r8]
     78e:	f88d 600c 	strb.w	r6, [sp, #12]
     792:	9500      	str	r5, [sp, #0]
     794:	f7ff ff12 	bl	5bc <mss_write_read_transaction>
     798:	7020      	strb	r0, [r4, #0]
     79a:	f7ff ff2b 	bl	5f4 <readcompass>
     79e:	7020      	strb	r0, [r4, #0]
     7a0:	f7ff fea6 	bl	4f0 <fill_uart_tx_buf>
     7a4:	7823      	ldrb	r3, [r4, #0]
     7a6:	b9b3      	cbnz	r3, 7d6 <main+0x15a>
     7a8:	f240 00b4 	movw	r0, #180	; 0xb4
     7ac:	f240 0144 	movw	r1, #68	; 0x44
     7b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
     7b4:	f2c2 0100 	movt	r1, #8192	; 0x2000
     7b8:	2216      	movs	r2, #22
     7ba:	f000 f81d 	bl	7f8 <MSS_UART_polled_tx>
     7be:	f242 73be 	movw	r3, #10174	; 0x27be
     7c2:	f2c0 0309 	movt	r3, #9
     7c6:	3b02      	subs	r3, #2
     7c8:	d0d8      	beq.n	77c <main+0x100>
     7ca:	e7fc      	b.n	7c6 <main+0x14a>
     7cc:	7811      	ldrb	r1, [r2, #0]
     7ce:	682a      	ldr	r2, [r5, #0]
     7d0:	55d9      	strb	r1, [r3, r7]
     7d2:	3301      	adds	r3, #1
     7d4:	e7c1      	b.n	75a <main+0xde>
     7d6:	f240 00b4 	movw	r0, #180	; 0xb4
     7da:	f641 1148 	movw	r1, #6472	; 0x1948
     7de:	f2c2 0000 	movt	r0, #8192	; 0x2000
     7e2:	f2c0 0100 	movt	r1, #0
     7e6:	2201      	movs	r2, #1
     7e8:	f000 f806 	bl	7f8 <MSS_UART_polled_tx>
     7ec:	e7e7      	b.n	7be <main+0x142>
     7ee:	3b72      	subs	r3, #114	; 0x72
     7f0:	7033      	strb	r3, [r6, #0]
     7f2:	f10d 0a0c 	add.w	sl, sp, #12
     7f6:	e7be      	b.n	776 <main+0xfa>

000007f8 <MSS_UART_polled_tx>:

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(pbuff != ( (uint8_t *)0));
    ASSERT(tx_size > 0u);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
     7f8:	f240 03b4 	movw	r3, #180	; 0xb4
     7fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     800:	4298      	cmp	r0, r3
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
     802:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(pbuff != ( (uint8_t *)0));
    ASSERT(tx_size > 0u);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
     806:	d008      	beq.n	81a <MSS_UART_polled_tx+0x22>
     808:	f240 0c74 	movw	ip, #116	; 0x74
     80c:	f2c2 0c00 	movt	ip, #8192	; 0x2000
     810:	4560      	cmp	r0, ip
     812:	d002      	beq.n	81a <MSS_UART_polled_tx+0x22>
                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
            }
        } while(tx_size);
    }
}
     814:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
     818:	4770      	bx	lr

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(pbuff != ( (uint8_t *)0));
    ASSERT(tx_size > 0u);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
     81a:	1e0b      	subs	r3, r1, #0
     81c:	bf18      	it	ne
     81e:	2301      	movne	r3, #1
     820:	2a00      	cmp	r2, #0
     822:	bf0c      	ite	eq
     824:	2300      	moveq	r3, #0
     826:	f003 0301 	andne.w	r3, r3, #1
     82a:	2b00      	cmp	r3, #0
     82c:	d0f2      	beq.n	814 <MSS_UART_polled_tx+0x1c>
     82e:	f890 800d 	ldrb.w	r8, [r0, #13]
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
     832:	f8d0 a000 	ldr.w	sl, [r0]
     836:	2500      	movs	r5, #0
     838:	f89a c014 	ldrb.w	ip, [sl, #20]
            this_uart->status |= status;
     83c:	ea48 080c 	orr.w	r8, r8, ip

            /* Check if TX FIFO is empty. */
            if(status & MSS_UART_THRE)
     840:	f01c 0f20 	tst.w	ip, #32
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
     844:	f880 800d 	strb.w	r8, [r0, #13]

            /* Check if TX FIFO is empty. */
            if(status & MSS_UART_THRE)
     848:	d023      	beq.n	892 <MSS_UART_polled_tx+0x9a>
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if(tx_size < TX_FIFO_SIZE)
     84a:	2a0f      	cmp	r2, #15
     84c:	d924      	bls.n	898 <MSS_UART_polled_tx+0xa0>
     84e:	2710      	movs	r7, #16

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
     850:	5d4e      	ldrb	r6, [r1, r5]
            if(status & MSS_UART_THRE)
            {
                uint32_t fill_size = TX_FIFO_SIZE;

                /* Calculate the number of bytes to transmit. */
                if(tx_size < TX_FIFO_SIZE)
     852:	6804      	ldr	r4, [r0, #0]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
     854:	2301      	movs	r3, #1
     856:	f107 3cff 	add.w	ip, r7, #4294967295
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
     85a:	7026      	strb	r6, [r4, #0]
     85c:	ea0c 0603 	and.w	r6, ip, r3
                    char_idx++;
     860:	eb05 0c03 	add.w	ip, r5, r3
     864:	194d      	adds	r5, r1, r5
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
     866:	42bb      	cmp	r3, r7
     868:	d211      	bcs.n	88e <MSS_UART_polled_tx+0x96>
     86a:	b136      	cbz	r6, 87a <MSS_UART_polled_tx+0x82>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
     86c:	5cee      	ldrb	r6, [r5, r3]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
     86e:	2302      	movs	r3, #2
     870:	42bb      	cmp	r3, r7
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
     872:	7026      	strb	r6, [r4, #0]
                    char_idx++;
     874:	f10c 0c01 	add.w	ip, ip, #1
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
     878:	d209      	bcs.n	88e <MSS_UART_polled_tx+0x96>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
     87a:	5cee      	ldrb	r6, [r5, r3]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
     87c:	3301      	adds	r3, #1
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
     87e:	7026      	strb	r6, [r4, #0]
     880:	5cee      	ldrb	r6, [r5, r3]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
     882:	3301      	adds	r3, #1
     884:	42bb      	cmp	r3, r7
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
     886:	7026      	strb	r6, [r4, #0]
                    char_idx++;
     888:	f10c 0c02 	add.w	ip, ip, #2
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
     88c:	d3f5      	bcc.n	87a <MSS_UART_polled_tx+0x82>
     88e:	4665      	mov	r5, ip
                    this_uart->hw_reg->THR = pbuff[char_idx];
                    char_idx++;
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
     890:	1ad2      	subs	r2, r2, r3
            }
        } while(tx_size);
     892:	2a00      	cmp	r2, #0
     894:	d1d0      	bne.n	838 <MSS_UART_polled_tx+0x40>
     896:	e7bd      	b.n	814 <MSS_UART_polled_tx+0x1c>
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
     898:	b10a      	cbz	r2, 89e <MSS_UART_polled_tx+0xa6>
     89a:	4617      	mov	r7, r2
     89c:	e7d8      	b.n	850 <MSS_UART_polled_tx+0x58>
     89e:	4613      	mov	r3, r2
                    this_uart->hw_reg->THR = pbuff[char_idx];
                    char_idx++;
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
     8a0:	1ad2      	subs	r2, r2, r3
     8a2:	e7f6      	b.n	892 <MSS_UART_polled_tx+0x9a>

000008a4 <MSS_UART_isr>:
{
    uint8_t iirf;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
     8a4:	f240 03b4 	movw	r3, #180	; 0xb4
     8a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     8ac:	4298      	cmp	r0, r3
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
     8ae:	b510      	push	{r4, lr}
     8b0:	4604      	mov	r4, r0
    uint8_t iirf;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
     8b2:	d006      	beq.n	8c2 <MSS_UART_isr+0x1e>
     8b4:	f240 0074 	movw	r0, #116	; 0x74
     8b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
     8bc:	4284      	cmp	r4, r0
     8be:	d000      	beq.n	8c2 <MSS_UART_isr+0x1e>
     8c0:	bd10      	pop	{r4, pc}
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
     8c2:	6822      	ldr	r2, [r4, #0]
     8c4:	7a11      	ldrb	r1, [r2, #8]

        switch (iirf)
     8c6:	f001 0c0f 	and.w	ip, r1, #15
     8ca:	f1bc 0f0c 	cmp.w	ip, #12
     8ce:	d8f7      	bhi.n	8c0 <MSS_UART_isr+0x1c>
     8d0:	a101      	add	r1, pc, #4	; (adr r1, 8d8 <MSS_UART_isr+0x34>)
     8d2:	f851 f02c 	ldr.w	pc, [r1, ip, lsl #2]
     8d6:	bf00      	nop
     8d8:	00000929 	.word	0x00000929
     8dc:	000008c1 	.word	0x000008c1
     8e0:	00000921 	.word	0x00000921
     8e4:	00000931 	.word	0x00000931
     8e8:	00000919 	.word	0x00000919
     8ec:	000008c1 	.word	0x000008c1
     8f0:	0000090d 	.word	0x0000090d
     8f4:	000008c1 	.word	0x000008c1
     8f8:	000008c1 	.word	0x000008c1
     8fc:	000008c1 	.word	0x000008c1
     900:	000008c1 	.word	0x000008c1
     904:	000008c1 	.word	0x000008c1
     908:	00000919 	.word	0x00000919
            break;

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->linests_handler);
                if(NULL_HANDLER != this_uart->linests_handler)
     90c:	69e3      	ldr	r3, [r4, #28]
     90e:	2b00      	cmp	r3, #0
     910:	d0d6      	beq.n	8c0 <MSS_UART_isr+0x1c>
                {
                   (*(this_uart->linests_handler))(this_uart);
     912:	4620      	mov	r0, r4
     914:	4798      	blx	r3
     916:	bd10      	pop	{r4, pc}

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT(NULL_HANDLER != this_uart->rx_handler);
                if(NULL_HANDLER != this_uart->rx_handler)
     918:	6a23      	ldr	r3, [r4, #32]
     91a:	2b00      	cmp	r3, #0
     91c:	d1f9      	bne.n	912 <MSS_UART_isr+0x6e>
     91e:	e7cf      	b.n	8c0 <MSS_UART_isr+0x1c>
            break;

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT(NULL_HANDLER != this_uart->tx_handler);
                if(NULL_HANDLER != this_uart->tx_handler)
     920:	6a63      	ldr	r3, [r4, #36]	; 0x24
     922:	2b00      	cmp	r3, #0
     924:	d1f5      	bne.n	912 <MSS_UART_isr+0x6e>
     926:	e7cb      	b.n	8c0 <MSS_UART_isr+0x1c>
        switch (iirf)
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->modemsts_handler);
                if(NULL_HANDLER != this_uart->modemsts_handler)
     928:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     92a:	2b00      	cmp	r3, #0
     92c:	d1f1      	bne.n	912 <MSS_UART_isr+0x6e>
     92e:	e7c7      	b.n	8c0 <MSS_UART_isr+0x1c>
            case IIRF_MMI:
            {
                /* Identify multimode interrupts and handle */

                /* Receiver time-out interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ERTOI))
     930:	3228      	adds	r2, #40	; 0x28
{
    return (HW_REG_BIT(reg,bit));
}
static __INLINE uint8_t read_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    return (HW_REG_BIT(reg,bit));
     932:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
     936:	f420 0370 	bic.w	r3, r0, #15728640	; 0xf00000
     93a:	f002 4170 	and.w	r1, r2, #4026531840	; 0xf0000000
     93e:	0158      	lsls	r0, r3, #5
     940:	f101 7c00 	add.w	ip, r1, #33554432	; 0x2000000
     944:	f85c 3000 	ldr.w	r3, [ip, r0]
     948:	f013 0fff 	tst.w	r3, #255	; 0xff
     94c:	d005      	beq.n	95a <MSS_UART_isr+0xb6>
                {
                    ASSERT(NULL_HANDLER != this_uart->rto_handler);
                    if(NULL_HANDLER != this_uart->rto_handler)
     94e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     950:	b11b      	cbz	r3, 95a <MSS_UART_isr+0xb6>
                    {
                        (*(this_uart->rto_handler))(this_uart);
     952:	4620      	mov	r0, r4
     954:	4798      	blx	r3
     956:	6822      	ldr	r2, [r4, #0]
     958:	3228      	adds	r2, #40	; 0x28
     95a:	f002 4070 	and.w	r0, r2, #4026531840	; 0xf0000000
     95e:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
     962:	f100 7300 	add.w	r3, r0, #33554432	; 0x2000000
     966:	f42c 0170 	bic.w	r1, ip, #15728640	; 0xf00000
     96a:	1d18      	adds	r0, r3, #4
     96c:	0149      	lsls	r1, r1, #5
     96e:	5843      	ldr	r3, [r0, r1]
                    }
                }
                /* NACK interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ENACKI))
     970:	f013 0fff 	tst.w	r3, #255	; 0xff
     974:	d005      	beq.n	982 <MSS_UART_isr+0xde>
                {
                    ASSERT(NULL_HANDLER != this_uart->nack_handler);
                    if(NULL_HANDLER != this_uart->nack_handler)
     976:	6b23      	ldr	r3, [r4, #48]	; 0x30
     978:	b11b      	cbz	r3, 982 <MSS_UART_isr+0xde>
                    {
                        (*(this_uart->nack_handler))(this_uart);
     97a:	4620      	mov	r0, r4
     97c:	4798      	blx	r3
     97e:	6822      	ldr	r2, [r4, #0]
     980:	3228      	adds	r2, #40	; 0x28
     982:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
     986:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
     98a:	f103 7000 	add.w	r0, r3, #33554432	; 0x2000000
     98e:	f42c 0170 	bic.w	r1, ip, #15728640	; 0xf00000
     992:	3008      	adds	r0, #8
     994:	0149      	lsls	r1, r1, #5
     996:	5843      	ldr	r3, [r0, r1]
                    }
                }

                /* PID parity error interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,EPID_PEI))
     998:	f013 0fff 	tst.w	r3, #255	; 0xff
     99c:	d005      	beq.n	9aa <MSS_UART_isr+0x106>
                {
                    ASSERT(NULL_HANDLER != this_uart->pid_pei_handler);
                    if(NULL_HANDLER != this_uart->pid_pei_handler)
     99e:	6b63      	ldr	r3, [r4, #52]	; 0x34
     9a0:	b11b      	cbz	r3, 9aa <MSS_UART_isr+0x106>
                    {
                        (*(this_uart->pid_pei_handler))(this_uart);
     9a2:	4620      	mov	r0, r4
     9a4:	4798      	blx	r3
     9a6:	6822      	ldr	r2, [r4, #0]
     9a8:	3228      	adds	r2, #40	; 0x28
     9aa:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
     9ae:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
     9b2:	f42c 0070 	bic.w	r0, ip, #15728640	; 0xf00000
     9b6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
     9ba:	330c      	adds	r3, #12
     9bc:	0141      	lsls	r1, r0, #5
     9be:	5858      	ldr	r0, [r3, r1]
                    }
                }

                /* LIN break detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINBI))
     9c0:	f010 0fff 	tst.w	r0, #255	; 0xff
     9c4:	d005      	beq.n	9d2 <MSS_UART_isr+0x12e>
                {
                    ASSERT(NULL_HANDLER != this_uart->break_handler);
                    if(NULL_HANDLER != this_uart->break_handler)
     9c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     9c8:	b11b      	cbz	r3, 9d2 <MSS_UART_isr+0x12e>
                    {
                        (*(this_uart->break_handler))(this_uart);
     9ca:	4620      	mov	r0, r4
     9cc:	4798      	blx	r3
     9ce:	6822      	ldr	r2, [r4, #0]
     9d0:	3228      	adds	r2, #40	; 0x28
     9d2:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
     9d6:	f002 4170 	and.w	r1, r2, #4026531840	; 0xf0000000
     9da:	f101 7200 	add.w	r2, r1, #33554432	; 0x2000000
     9de:	f42c 0370 	bic.w	r3, ip, #15728640	; 0xf00000
     9e2:	3210      	adds	r2, #16
     9e4:	0158      	lsls	r0, r3, #5
     9e6:	5811      	ldr	r1, [r2, r0]
                    }
                }

                /* LIN Sync detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINSI))
     9e8:	f011 0fff 	tst.w	r1, #255	; 0xff
     9ec:	f43f af68 	beq.w	8c0 <MSS_UART_isr+0x1c>
                {
                    ASSERT(NULL_HANDLER != this_uart->sync_handler);
                    if(NULL_HANDLER != this_uart->sync_handler)
     9f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     9f2:	2b00      	cmp	r3, #0
     9f4:	f43f af64 	beq.w	8c0 <MSS_UART_isr+0x1c>
                    {
                        (*(this_uart->sync_handler))(this_uart);
     9f8:	4620      	mov	r0, r4
     9fa:	4798      	blx	r3
     9fc:	e760      	b.n	8c0 <MSS_UART_isr+0x1c>
     9fe:	bf00      	nop

00000a00 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler(void)
#else
void UART1_IRQHandler(void)
#endif
{
     a00:	4668      	mov	r0, sp
     a02:	f020 0107 	bic.w	r1, r0, #7
     a06:	468d      	mov	sp, r1
     a08:	b501      	push	{r0, lr}
    MSS_UART_isr(&g_mss_uart1);
     a0a:	f240 0074 	movw	r0, #116	; 0x74
     a0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a12:	f7ff ff47 	bl	8a4 <MSS_UART_isr>
}
     a16:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
     a1a:	4685      	mov	sp, r0
     a1c:	4770      	bx	lr
     a1e:	bf00      	nop

00000a20 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler(void)
#else
void UART0_IRQHandler(void)
#endif
{
     a20:	4668      	mov	r0, sp
     a22:	f020 0107 	bic.w	r1, r0, #7
     a26:	468d      	mov	sp, r1
     a28:	b501      	push	{r0, lr}
    MSS_UART_isr(&g_mss_uart0);
     a2a:	f240 00b4 	movw	r0, #180	; 0xb4
     a2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a32:	f7ff ff37 	bl	8a4 <MSS_UART_isr>
}
     a36:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
     a3a:	4685      	mov	sp, r0
     a3c:	4770      	bx	lr
     a3e:	bf00      	nop

00000a40 <default_tx_handler>:

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
     a40:	f240 03b4 	movw	r3, #180	; 0xb4
     a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a48:	4298      	cmp	r0, r3
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
     a4a:	b470      	push	{r4, r5, r6}

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
     a4c:	d007      	beq.n	a5e <default_tx_handler+0x1e>
     a4e:	f240 0174 	movw	r1, #116	; 0x74
     a52:	f2c2 0100 	movt	r1, #8192	; 0x2000
     a56:	4288      	cmp	r0, r1
     a58:	d001      	beq.n	a5e <default_tx_handler+0x1e>
            this_uart->tx_buff_size = TX_COMPLETE;
            /* disables TX interrupt */
            clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
        }
    }
}
     a5a:	bc70      	pop	{r4, r5, r6}
     a5c:	4770      	bx	lr
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
     a5e:	6904      	ldr	r4, [r0, #16]
     a60:	2c00      	cmp	r4, #0
     a62:	d0fa      	beq.n	a5a <default_tx_handler+0x1a>
       (0u < this_uart->tx_buff_size))
     a64:	6943      	ldr	r3, [r0, #20]
     a66:	2b00      	cmp	r3, #0
     a68:	d0f7      	beq.n	a5a <default_tx_handler+0x1a>
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
     a6a:	6801      	ldr	r1, [r0, #0]
        this_uart->status |= status;
     a6c:	f890 c00d 	ldrb.w	ip, [r0, #13]
    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
     a70:	7d0a      	ldrb	r2, [r1, #20]
        this_uart->status |= status;
     a72:	ea42 0c0c 	orr.w	ip, r2, ip

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if(status & MSS_UART_THRE)
     a76:	f012 0f20 	tst.w	r2, #32
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;
     a7a:	f880 c00d 	strb.w	ip, [r0, #13]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if(status & MSS_UART_THRE)
     a7e:	6982      	ldr	r2, [r0, #24]
     a80:	d029      	beq.n	ad6 <default_tx_handler+0x96>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
     a82:	1a9d      	subs	r5, r3, r2

            /* Calculate the number of bytes to transmit. */
            if(tx_remain < TX_FIFO_SIZE)
     a84:	2d0f      	cmp	r5, #15
     a86:	d938      	bls.n	afa <default_tx_handler+0xba>
     a88:	2510      	movs	r5, #16
     a8a:	18a4      	adds	r4, r4, r2

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
     a8c:	7826      	ldrb	r6, [r4, #0]
     a8e:	1e6b      	subs	r3, r5, #1
     a90:	700e      	strb	r6, [r1, #0]
     a92:	f003 0601 	and.w	r6, r3, #1
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
     a96:	2301      	movs	r3, #1
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
                ++this_uart->tx_idx;
     a98:	3201      	adds	r2, #1
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
     a9a:	429d      	cmp	r5, r3
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
                ++this_uart->tx_idx;
     a9c:	6182      	str	r2, [r0, #24]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
     a9e:	d919      	bls.n	ad4 <default_tx_handler+0x94>
     aa0:	b146      	cbz	r6, ab4 <default_tx_handler+0x74>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
     aa2:	f894 c001 	ldrb.w	ip, [r4, #1]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
     aa6:	2302      	movs	r3, #2
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
                ++this_uart->tx_idx;
     aa8:	3201      	adds	r2, #1
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
     aaa:	429d      	cmp	r5, r3
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
     aac:	f881 c000 	strb.w	ip, [r1]
                ++this_uart->tx_idx;
     ab0:	6182      	str	r2, [r0, #24]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
     ab2:	d90f      	bls.n	ad4 <default_tx_handler+0x94>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
     ab4:	f814 c003 	ldrb.w	ip, [r4, r3]
                ++this_uart->tx_idx;
     ab8:	3201      	adds	r2, #1

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
     aba:	f881 c000 	strb.w	ip, [r1]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
     abe:	3301      	adds	r3, #1
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
                ++this_uart->tx_idx;
     ac0:	6182      	str	r2, [r0, #24]

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
     ac2:	f814 c003 	ldrb.w	ip, [r4, r3]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
     ac6:	3301      	adds	r3, #1
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
                ++this_uart->tx_idx;
     ac8:	3201      	adds	r2, #1
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
     aca:	429d      	cmp	r5, r3
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
     acc:	f881 c000 	strb.w	ip, [r1]
                ++this_uart->tx_idx;
     ad0:	6182      	str	r2, [r0, #24]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
     ad2:	d8ef      	bhi.n	ab4 <default_tx_handler+0x74>
     ad4:	6943      	ldr	r3, [r0, #20]
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if(this_uart->tx_idx == this_uart->tx_buff_size)
     ad6:	429a      	cmp	r2, r3
     ad8:	d1bf      	bne.n	a5a <default_tx_handler+0x1a>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
            /* disables TX interrupt */
            clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
     ada:	6802      	ldr	r2, [r0, #0]
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if(this_uart->tx_idx == this_uart->tx_buff_size)
        {
            this_uart->tx_buff_size = TX_COMPLETE;
     adc:	2100      	movs	r1, #0
            /* disables TX interrupt */
            clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
     ade:	1d13      	adds	r3, r2, #4
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     ae0:	f023 4c7f 	bic.w	ip, r3, #4278190080	; 0xff000000
     ae4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
     ae8:	f102 7300 	add.w	r3, r2, #33554432	; 0x2000000
     aec:	f42c 0270 	bic.w	r2, ip, #15728640	; 0xf00000
     af0:	3304      	adds	r3, #4
     af2:	0152      	lsls	r2, r2, #5
     af4:	5099      	str	r1, [r3, r2]
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if(this_uart->tx_idx == this_uart->tx_buff_size)
        {
            this_uart->tx_buff_size = TX_COMPLETE;
     af6:	6141      	str	r1, [r0, #20]
     af8:	e7af      	b.n	a5a <default_tx_handler+0x1a>
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
     afa:	2d00      	cmp	r5, #0
     afc:	d1c5      	bne.n	a8a <default_tx_handler+0x4a>
     afe:	e7ea      	b.n	ad6 <default_tx_handler+0x96>

00000b00 <global_init>:
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
     b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if(this_uart == &g_mss_uart0)
     b04:	f240 03b4 	movw	r3, #180	; 0xb4
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
     b08:	b08f      	sub	sp, #60	; 0x3c
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if(this_uart == &g_mss_uart0)
     b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
     b0e:	920b      	str	r2, [sp, #44]	; 0x2c
    if(this_uart == &g_mss_uart0)
    {
        this_uart->hw_reg = UART0;
        this_uart->irqn = UART0_IRQn;
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
     b10:	f248 0200 	movw	r2, #32768	; 0x8000
{
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if(this_uart == &g_mss_uart0)
     b14:	4298      	cmp	r0, r3
    {
        this_uart->hw_reg = UART0;
        this_uart->irqn = UART0_IRQn;
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
     b16:	f2c4 0203 	movt	r2, #16387	; 0x4003
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
     b1a:	4604      	mov	r4, r0
     b1c:	910d      	str	r1, [sp, #52]	; 0x34
    if(this_uart == &g_mss_uart0)
    {
        this_uart->hw_reg = UART0;
        this_uart->irqn = UART0_IRQn;
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
     b1e:	6c90      	ldr	r0, [r2, #72]	; 0x48
     b20:	f24e 1100 	movw	r1, #57600	; 0xe100
{
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if(this_uart == &g_mss_uart0)
     b24:	f000 8129 	beq.w	d7a <global_init+0x27a>
    else
    {
        this_uart->hw_reg = UART1;
        this_uart->irqn = UART1_IRQn;
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
     b28:	f440 7780 	orr.w	r7, r0, #256	; 0x100
     b2c:	f2ce 0100 	movt	r1, #57344	; 0xe000
     b30:	f44f 6600 	mov.w	r6, #2048	; 0x800
     b34:	6497      	str	r7, [r2, #72]	; 0x48
     b36:	f8c1 6180 	str.w	r6, [r1, #384]	; 0x180
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ(UART1_IRQn);
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
     b3a:	6c95      	ldr	r5, [r2, #72]	; 0x48
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
    }
    else
    {
        this_uart->hw_reg = UART1;
     b3c:	f240 0100 	movw	r1, #0
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ(UART1_IRQn);
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
     b40:	f425 7080 	bic.w	r0, r5, #256	; 0x100
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
    }
    else
    {
        this_uart->hw_reg = UART1;
     b44:	f2c4 0101 	movt	r1, #16385	; 0x4001
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ(UART1_IRQn);
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
     b48:	6490      	str	r0, [r2, #72]	; 0x48
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
    }
    else
    {
        this_uart->hw_reg = UART1;
        this_uart->irqn = UART1_IRQn;
     b4a:	220b      	movs	r2, #11
     b4c:	7122      	strb	r2, [r4, #4]
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
    }
    else
    {
        this_uart->hw_reg = UART1;
     b4e:	6021      	str	r1, [r4, #0]
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0u;
     b50:	2200      	movs	r2, #0

    /* FIFO configuration */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE;
     b52:	460d      	mov	r5, r1
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0u;
     b54:	710a      	strb	r2, [r1, #4]
    /* enable RXRDYN and TXRDYN pins. The earlier FCR write to set the TX FIFO
     * trigger level inadvertently disabled the FCR_RXRDY_TXRDYN_EN bit. */
    set_bit_reg8(&this_uart->hw_reg->FCR,RXRDY_TXRDYN_EN);

    /* disable loopback : local * remote */
    clear_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
     b56:	f101 0610 	add.w	r6, r1, #16

    /* disable interrupts */
    this_uart->hw_reg->IER = 0u;

    /* FIFO configuration */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE;
     b5a:	f805 2f08 	strb.w	r2, [r5, #8]!
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX);
    /* set default RX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX);

    /* default AFM : disabled */
    clear_bit_reg8(&this_uart->hw_reg->MM2,EAFM);
     b5e:	f101 0a38 	add.w	sl, r1, #56	; 0x38
     b62:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    /* disable loopback : local * remote */
    clear_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
    clear_bit_reg8(&this_uart->hw_reg->MCR,RLOOP);

    /* set default TX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX);
     b66:	f101 0934 	add.w	r9, r1, #52	; 0x34
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     b6a:	f025 477f 	bic.w	r7, r5, #4278190080	; 0xff000000
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     b6e:	f026 487f 	bic.w	r8, r6, #4278190080	; 0xff000000
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     b72:	f005 4570 	and.w	r5, r5, #4026531840	; 0xf0000000
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     b76:	f006 4670 	and.w	r6, r6, #4026531840	; 0xf0000000
     b7a:	f00a 4a70 	and.w	sl, sl, #4026531840	; 0xf0000000
     b7e:	f8cd a010 	str.w	sl, [sp, #16]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     b82:	9506      	str	r5, [sp, #24]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     b84:	f029 407f 	bic.w	r0, r9, #4278190080	; 0xff000000
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     b88:	f106 7500 	add.w	r5, r6, #33554432	; 0x2000000
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     b8c:	9003      	str	r0, [sp, #12]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     b8e:	9501      	str	r5, [sp, #4]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     b90:	f009 4970 	and.w	r9, r9, #4026531840	; 0xf0000000
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     b94:	9d04      	ldr	r5, [sp, #16]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     b96:	f8cd 901c 	str.w	r9, [sp, #28]
     b9a:	f8dd 900c 	ldr.w	r9, [sp, #12]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     b9e:	f105 7500 	add.w	r5, r5, #33554432	; 0x2000000
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     ba2:	f429 0a70 	bic.w	sl, r9, #15728640	; 0xf00000
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     ba6:	950a      	str	r5, [sp, #40]	; 0x28
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     ba8:	f42b 0970 	bic.w	r9, fp, #15728640	; 0xf00000
     bac:	9d07      	ldr	r5, [sp, #28]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     bae:	f8dd b018 	ldr.w	fp, [sp, #24]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     bb2:	f8cd 9014 	str.w	r9, [sp, #20]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     bb6:	f10b 7900 	add.w	r9, fp, #33554432	; 0x2000000
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     bba:	f105 7b00 	add.w	fp, r5, #33554432	; 0x2000000
     bbe:	9d04      	ldr	r5, [sp, #16]

    /* default AFM : disabled */
    clear_bit_reg8(&this_uart->hw_reg->MM2,EAFM);

    /* disable TX time gaurd */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ETTG); 
     bc0:	f101 0c30 	add.w	ip, r1, #48	; 0x30
     bc4:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
     bc8:	f105 7500 	add.w	r5, r5, #33554432	; 0x2000000
     bcc:	f00c 4c70 	and.w	ip, ip, #4026531840	; 0xf0000000
     bd0:	f8cd a00c 	str.w	sl, [sp, #12]
     bd4:	9504      	str	r5, [sp, #16]
     bd6:	f10c 7500 	add.w	r5, ip, #33554432	; 0x2000000
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     bda:	f10c 7a00 	add.w	sl, ip, #33554432	; 0x2000000
     bde:	46ac      	mov	ip, r5
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     be0:	9d03      	ldr	r5, [sp, #12]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     be2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     be6:	016d      	lsls	r5, r5, #5
     be8:	9503      	str	r5, [sp, #12]
     bea:	9d05      	ldr	r5, [sp, #20]
     bec:	f428 0870 	bic.w	r8, r8, #15728640	; 0xf00000
     bf0:	016d      	lsls	r5, r5, #5
     bf2:	9505      	str	r5, [sp, #20]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     bf4:	9d06      	ldr	r5, [sp, #24]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     bf6:	46ca      	mov	sl, r9
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     bf8:	f105 7500 	add.w	r5, r5, #33554432	; 0x2000000
     bfc:	9506      	str	r5, [sp, #24]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     bfe:	9d01      	ldr	r5, [sp, #4]
     c00:	ea4f 1848 	mov.w	r8, r8, lsl #5
     c04:	3514      	adds	r5, #20
     c06:	9501      	str	r5, [sp, #4]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     c08:	9d07      	ldr	r5, [sp, #28]
     c0a:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     c0e:	f105 7500 	add.w	r5, r5, #33554432	; 0x2000000
     c12:	9507      	str	r5, [sp, #28]
     c14:	9d04      	ldr	r5, [sp, #16]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     c16:	017f      	lsls	r7, r7, #5
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     c18:	3504      	adds	r5, #4
     c1a:	9504      	str	r5, [sp, #16]
     c1c:	4665      	mov	r5, ip
     c1e:	3514      	adds	r5, #20
     c20:	9508      	str	r5, [sp, #32]
     c22:	9d09      	ldr	r5, [sp, #36]	; 0x24
     c24:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
     c28:	351c      	adds	r5, #28
     c2a:	9509      	str	r5, [sp, #36]	; 0x24
     c2c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     c2e:	f04f 0801 	mov.w	r8, #1
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     c32:	350c      	adds	r5, #12
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     c34:	f10a 0a08 	add.w	sl, sl, #8
     c38:	f109 0904 	add.w	r9, r9, #4
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     c3c:	950a      	str	r5, [sp, #40]	; 0x28
     c3e:	f106 7600 	add.w	r6, r6, #33554432	; 0x2000000
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     c42:	f849 8007 	str.w	r8, [r9, r7]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     c46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     c48:	f84a 8007 	str.w	r8, [sl, r7]
     c4c:	f8dd a018 	ldr.w	sl, [sp, #24]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     c50:	3610      	adds	r6, #16
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     c52:	f84a 8007 	str.w	r8, [sl, r7]
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     c56:	5172      	str	r2, [r6, r5]
     c58:	f8dd a00c 	ldr.w	sl, [sp, #12]
     c5c:	9e01      	ldr	r6, [sp, #4]
     c5e:	f10b 0b04 	add.w	fp, fp, #4
     c62:	5172      	str	r2, [r6, r5]
     c64:	f84b 200a 	str.w	r2, [fp, sl]
     c68:	f8dd b01c 	ldr.w	fp, [sp, #28]
     c6c:	9d05      	ldr	r5, [sp, #20]
     c6e:	f84b 200a 	str.w	r2, [fp, sl]
     c72:	9e04      	ldr	r6, [sp, #16]
     c74:	f8dd a020 	ldr.w	sl, [sp, #32]
     c78:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
     c7c:	0140      	lsls	r0, r0, #5
     c7e:	f10c 0c18 	add.w	ip, ip, #24
     c82:	5172      	str	r2, [r6, r5]
     c84:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
     c88:	f84a 2000 	str.w	r2, [sl, r0]
     c8c:	f84c 2000 	str.w	r2, [ip, r0]
     c90:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    uint32_t baudrate    
)
{
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    
    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
     c94:	429c      	cmp	r4, r3
     c96:	f84b 2000 	str.w	r2, [fp, r0]
     c9a:	f84c 2005 	str.w	r2, [ip, r5]

    /* disable single wire mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2,ESWM);

    /* set filter to minimum value */
    this_uart->hw_reg->GFR = 0u;
     c9e:	f881 2044 	strb.w	r2, [r1, #68]	; 0x44
    /* set default TX time gaurd */
    this_uart->hw_reg->TTG = 0u;
     ca2:	f881 2048 	strb.w	r2, [r1, #72]	; 0x48
    /* set default RX timeout */
    this_uart->hw_reg->RTO = 0u;
     ca6:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
    uint32_t baudrate    
)
{
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    
    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
     caa:	d079      	beq.n	da0 <global_init+0x2a0>
     cac:	f240 0374 	movw	r3, #116	; 0x74
     cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb4:	429c      	cmp	r4, r3
     cb6:	d015      	beq.n	ce4 <global_init+0x1e4>
     * where possible to provide the most accurate baud rat possible.
     */
    config_baud_divisors(this_uart, baud_rate);

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
     cb8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c

    /* Instance setup */
    this_uart->baudrate = baud_rate;
    this_uart->lineconfig = line_config;
    this_uart->tx_buff_size = TX_COMPLETE;
     cba:	2000      	movs	r0, #0
     * where possible to provide the most accurate baud rat possible.
     */
    config_baud_divisors(this_uart, baud_rate);

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
     cbc:	730d      	strb	r5, [r1, #12]
    this_uart->pid_pei_handler  = NULL_HANDLER;
    this_uart->break_handler    = NULL_HANDLER;    
    this_uart->sync_handler     = NULL_HANDLER;   

    /* Initialize the sticky status */
    this_uart->status = 0u;
     cbe:	7360      	strb	r0, [r4, #13]

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;

    /* Instance setup */
    this_uart->baudrate = baud_rate;
     cc0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    this_uart->lineconfig = line_config;
    this_uart->tx_buff_size = TX_COMPLETE;
     cc2:	6160      	str	r0, [r4, #20]

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;

    /* Instance setup */
    this_uart->baudrate = baud_rate;
     cc4:	60a6      	str	r6, [r4, #8]
    this_uart->lineconfig = line_config;
     cc6:	7325      	strb	r5, [r4, #12]
    this_uart->tx_buff_size = TX_COMPLETE;
    this_uart->tx_buffer = (const uint8_t *)0;
     cc8:	6120      	str	r0, [r4, #16]
    this_uart->tx_idx = 0u;
     cca:	61a0      	str	r0, [r4, #24]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
     ccc:	6220      	str	r0, [r4, #32]
    this_uart->tx_handler       = NULL_HANDLER;
     cce:	6260      	str	r0, [r4, #36]	; 0x24
    this_uart->linests_handler  = NULL_HANDLER;
     cd0:	61e0      	str	r0, [r4, #28]
    this_uart->modemsts_handler = NULL_HANDLER;
     cd2:	62a0      	str	r0, [r4, #40]	; 0x28
    this_uart->rto_handler      = NULL_HANDLER;    
     cd4:	62e0      	str	r0, [r4, #44]	; 0x2c
    this_uart->nack_handler     = NULL_HANDLER;   
     cd6:	6320      	str	r0, [r4, #48]	; 0x30
    this_uart->pid_pei_handler  = NULL_HANDLER;
     cd8:	6360      	str	r0, [r4, #52]	; 0x34
    this_uart->break_handler    = NULL_HANDLER;    
     cda:	63a0      	str	r0, [r4, #56]	; 0x38
    this_uart->sync_handler     = NULL_HANDLER;   
     cdc:	63e0      	str	r0, [r4, #60]	; 0x3c

    /* Initialize the sticky status */
    this_uart->status = 0u;
}
     cde:	b00f      	add	sp, #60	; 0x3c
     ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t baud_value_by_64;
        uint32_t baud_value_by_128;
        uint32_t fractional_baud_value;
        uint32_t pclk_freq;

        this_uart->baudrate = baudrate;
     ce4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
     ce6:	60a7      	str	r7, [r4, #8]

        /* Force the value of the CMSIS global variables holding the various system
          * clock frequencies to be updated. */
        SystemCoreClockUpdate();
     ce8:	f000 fc9e 	bl	1628 <SystemCoreClockUpdate>
        {
            pclk_freq = g_FrequencyPCLK0;
        }
        else
        {
            pclk_freq = g_FrequencyPCLK1;
     cec:	f240 011c 	movw	r1, #28
     cf0:	f2c2 0100 	movt	r1, #8192	; 0x2000
     cf4:	680a      	ldr	r2, [r1, #0]
        /*
         * Compute baud value based on requested baud rate and PCLK frequency.
         * The baud value is computed using the following equation:
         *      baud_value = PCLK_Frequency / (baud_rate * 16)
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
     cf6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     cf8:	00d7      	lsls	r7, r2, #3
     cfa:	fbb7 f2f6 	udiv	r2, r7, r6
        baud_value_by_64 = baud_value_by_128 / 2u;
        baud_value = baud_value_by_64 / 64u;
     cfe:	09d3      	lsrs	r3, r2, #7
         * Compute baud value based on requested baud rate and PCLK frequency.
         * The baud value is computed using the following equation:
         *      baud_value = PCLK_Frequency / (baud_rate * 16)
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
        baud_value_by_64 = baud_value_by_128 / 2u;
     d00:	0857      	lsrs	r7, r2, #1
        fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value * 2u);
        
        /* Assert if integer baud value fits in 16-bit. */
        ASSERT(baud_value <= UINT16_MAX);
    
        if(baud_value <= (uint32_t)UINT16_MAX)
     d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     d06:	bf28      	it	cs
     d08:	6821      	ldrcs	r1, [r4, #0]
     d0a:	d2d5      	bcs.n	cb8 <global_init+0x1b8>
        {
            if(baud_value > 1u)
     d0c:	2b01      	cmp	r3, #1
            {
                /* 
                 * Use Frational baud rate divisors
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
     d0e:	6821      	ldr	r1, [r4, #0]
        /* Assert if integer baud value fits in 16-bit. */
        ASSERT(baud_value <= UINT16_MAX);
    
        if(baud_value <= (uint32_t)UINT16_MAX)
        {
            if(baud_value > 1u)
     d10:	d950      	bls.n	db4 <global_init+0x2b4>
            {
                /* 
                 * Use Frational baud rate divisors
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
     d12:	f101 000c 	add.w	r0, r1, #12
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     d16:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     d1a:	f000 4670 	and.w	r6, r0, #4026531840	; 0xf0000000
     d1e:	f106 7000 	add.w	r0, r6, #33554432	; 0x2000000
     d22:	f42c 0a70 	bic.w	sl, ip, #15728640	; 0xf00000
     d26:	ea4f 1e4a 	mov.w	lr, sl, lsl #5
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
     d2a:	460d      	mov	r5, r1
     d2c:	fa5f f883 	uxtb.w	r8, r3
         *      baud_value = PCLK_Frequency / (baud_rate * 16)
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
        baud_value_by_64 = baud_value_by_128 / 2u;
        baud_value = baud_value_by_64 / 64u;
        fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
     d30:	eba7 1783 	sub.w	r7, r7, r3, lsl #6
     d34:	301c      	adds	r0, #28
     d36:	2601      	movs	r6, #1
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
     d38:	f3c2 3ac7 	ubfx	sl, r2, #15, #8
     d3c:	f840 600e 	str.w	r6, [r0, lr]
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
        baud_value_by_64 = baud_value_by_128 / 2u;
        baud_value = baud_value_by_64 / 64u;
        fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
        fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value * 2u);
     d40:	eba7 13c3 	sub.w	r3, r7, r3, lsl #7
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
     d44:	f881 a004 	strb.w	sl, [r1, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
     d48:	f805 8b30 	strb.w	r8, [r5], #48
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
        baud_value_by_64 = baud_value_by_128 / 2u;
        baud_value = baud_value_by_64 / 64u;
        fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
        fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value * 2u);
     d4c:	189a      	adds	r2, r3, r2
     d4e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
     d52:	f005 4570 	and.w	r5, r5, #4026531840	; 0xf0000000
     d56:	f423 0870 	bic.w	r8, r3, #15728640	; 0xf00000
                /* Enable Fractional baud rate */
                set_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
        
                /* Load the fractional baud rate register */
                ASSERT(fractional_baud_value <= (uint32_t)UINT8_MAX);
                this_uart->hw_reg->DFR = (uint8_t)fractional_baud_value;
     d5a:	eba2 0747 	sub.w	r7, r2, r7, lsl #1
     d5e:	f105 7500 	add.w	r5, r5, #33554432	; 0x2000000
     d62:	351c      	adds	r5, #28
     d64:	ea4f 1848 	mov.w	r8, r8, lsl #5
     d68:	b2ff      	uxtb	r7, r7
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     d6a:	2300      	movs	r3, #0
     d6c:	f840 300e 	str.w	r3, [r0, lr]
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
     d70:	f845 6008 	str.w	r6, [r5, r8]
     d74:	f881 703c 	strb.w	r7, [r1, #60]	; 0x3c
     d78:	e79e      	b.n	cb8 <global_init+0x1b8>
    if(this_uart == &g_mss_uart0)
    {
        this_uart->hw_reg = UART0;
        this_uart->irqn = UART0_IRQn;
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
     d7a:	f040 0780 	orr.w	r7, r0, #128	; 0x80
     d7e:	f2ce 0100 	movt	r1, #57344	; 0xe000
     d82:	f44f 6680 	mov.w	r6, #1024	; 0x400
     d86:	6497      	str	r7, [r2, #72]	; 0x48
     d88:	f8c1 6180 	str.w	r6, [r1, #384]	; 0x180
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ(UART0_IRQn);
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
     d8c:	6c95      	ldr	r5, [r2, #72]	; 0x48
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if(this_uart == &g_mss_uart0)
    {
        this_uart->hw_reg = UART0;
     d8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ(UART0_IRQn);
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
     d92:	f025 0080 	bic.w	r0, r5, #128	; 0x80
     d96:	6490      	str	r0, [r2, #72]	; 0x48
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if(this_uart == &g_mss_uart0)
    {
        this_uart->hw_reg = UART0;
        this_uart->irqn = UART0_IRQn;
     d98:	220a      	movs	r2, #10
     d9a:	7122      	strb	r2, [r4, #4]
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    if(this_uart == &g_mss_uart0)
    {
        this_uart->hw_reg = UART0;
     d9c:	6021      	str	r1, [r4, #0]
     d9e:	e6d7      	b.n	b50 <global_init+0x50>
        uint32_t baud_value_by_64;
        uint32_t baud_value_by_128;
        uint32_t fractional_baud_value;
        uint32_t pclk_freq;

        this_uart->baudrate = baudrate;
     da0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     da2:	60a2      	str	r2, [r4, #8]

        /* Force the value of the CMSIS global variables holding the various system
          * clock frequencies to be updated. */
        SystemCoreClockUpdate();
     da4:	f000 fc40 	bl	1628 <SystemCoreClockUpdate>
        if(this_uart == &g_mss_uart0)
        {
            pclk_freq = g_FrequencyPCLK0;
     da8:	f240 0118 	movw	r1, #24
     dac:	f2c2 0100 	movt	r1, #8192	; 0x2000
     db0:	680a      	ldr	r2, [r1, #0]
     db2:	e7a0      	b.n	cf6 <global_init+0x1f6>
            {
                /*
                 * Do NOT use Frational baud rate divisors.
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
     db4:	f101 0c0c 	add.w	ip, r1, #12
     db8:	f02c 4e7f 	bic.w	lr, ip, #4278190080	; 0xff000000
     dbc:	f00c 4270 	and.w	r2, ip, #4026531840	; 0xf0000000
     dc0:	f42e 0570 	bic.w	r5, lr, #15728640	; 0xf00000
     dc4:	f102 7200 	add.w	r2, r2, #33554432	; 0x2000000
     dc8:	ea4f 1e45 	mov.w	lr, r5, lsl #5
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
     dcc:	4608      	mov	r0, r1
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
     dce:	2500      	movs	r5, #0
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
     dd0:	b2db      	uxtb	r3, r3
     dd2:	321c      	adds	r2, #28
     dd4:	2601      	movs	r6, #1
     dd6:	f842 600e 	str.w	r6, [r2, lr]
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
     dda:	710d      	strb	r5, [r1, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
     ddc:	f800 3b30 	strb.w	r3, [r0], #48
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
     de0:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     de4:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
     de8:	f100 7600 	add.w	r6, r0, #33554432	; 0x2000000
     dec:	f42c 0370 	bic.w	r3, ip, #15728640	; 0xf00000
     df0:	361c      	adds	r6, #28
     df2:	015b      	lsls	r3, r3, #5
     df4:	f842 500e 	str.w	r5, [r2, lr]
     df8:	50f5      	str	r5, [r6, r3]
     dfa:	e75d      	b.n	cb8 <global_init+0x1b8>

00000dfc <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart, 
    uint32_t baud_rate,
    uint8_t line_config
)
{
     dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dfe:	4604      	mov	r4, r0
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));

    /* Perform generic initialization */
    global_init(this_uart, baud_rate, line_config);
     e00:	f7ff fe7e 	bl	b00 <global_init>

    /* Disable LIN mode */
    clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
     e04:	6822      	ldr	r2, [r4, #0]
     e06:	f64f 73ff 	movw	r3, #65535	; 0xffff

    /* Disable IrDA mode */
    clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);
     e0a:	f102 0034 	add.w	r0, r2, #52	; 0x34

    /* Perform generic initialization */
    global_init(this_uart, baud_rate, line_config);

    /* Disable LIN mode */
    clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
     e0e:	f102 0530 	add.w	r5, r2, #48	; 0x30
     e12:	f2c0 030f 	movt	r3, #15
     e16:	f005 4770 	and.w	r7, r5, #4026531840	; 0xf0000000

    /* Disable IrDA mode */
    clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);

    /* Disable SmartCard Mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
     e1a:	3238      	adds	r2, #56	; 0x38
     e1c:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000

    /* set default tx handler for automated TX using interrupt in USART mode */
    this_uart->tx_handler = default_tx_handler;
     e20:	ea02 0603 	and.w	r6, r2, r3
     e24:	f107 7c00 	add.w	ip, r7, #33554432	; 0x2000000
     e28:	401d      	ands	r5, r3
     e2a:	ea00 0703 	and.w	r7, r0, r3
     e2e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
     e32:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
     e36:	f640 2041 	movw	r0, #2625	; 0xa41
     e3a:	017b      	lsls	r3, r7, #5
     e3c:	f10c 0c0c 	add.w	ip, ip, #12
     e40:	f102 7700 	add.w	r7, r2, #33554432	; 0x2000000
     e44:	016d      	lsls	r5, r5, #5
     e46:	2200      	movs	r2, #0
     e48:	3108      	adds	r1, #8
     e4a:	0176      	lsls	r6, r6, #5
     e4c:	f2c0 0000 	movt	r0, #0
     e50:	f84c 2005 	str.w	r2, [ip, r5]
     e54:	6260      	str	r0, [r4, #36]	; 0x24
     e56:	50ca      	str	r2, [r1, r3]
     e58:	51ba      	str	r2, [r7, r6]
}
     e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000e5c <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
     e5c:	b4f0      	push	{r4, r5, r6, r7}
     e5e:	b082      	sub	sp, #8
     e60:	f89d 7018 	ldrb.w	r7, [sp, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     e64:	f3ef 8610 	mrs	r6, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     e68:	f04f 0c01 	mov.w	ip, #1
     e6c:	f38c 8810 	msr	PRIMASK, ip
    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));

    primask = disable_interrupts();

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
     e70:	7a04      	ldrb	r4, [r0, #8]
     e72:	b90c      	cbnz	r4, e78 <MSS_I2C_write+0x1c>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
     e74:	f880 c008 	strb.w	ip, [r0, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
     e78:	2401      	movs	r4, #1

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
     e7a:	40a1      	lsls	r1, r4
    this_i2c->master_tx_buffer = write_buffer;
    this_i2c->master_tx_size = write_size;
    this_i2c->master_tx_idx = 0u;

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
     e7c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    this_i2c->options = options;

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
     e80:	f890 c05c 	ldrb.w	ip, [r0, #92]	; 0x5c
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;

    this_i2c->dir = WRITE_DIR;
     e84:	2500      	movs	r5, #0

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
    this_i2c->options = options;

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
     e86:	45a4      	cmp	ip, r4
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;

    this_i2c->dir = WRITE_DIR;

    this_i2c->master_tx_buffer = write_buffer;
    this_i2c->master_tx_size = write_size;
     e88:	6243      	str	r3, [r0, #36]	; 0x24
    {
        this_i2c->is_transaction_pending = 1u;
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
     e8a:	bf18      	it	ne
     e8c:	6983      	ldrne	r3, [r0, #24]
    this_i2c->master_tx_size = write_size;
    this_i2c->master_tx_idx = 0u;

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
    this_i2c->options = options;
     e8e:	7407      	strb	r7, [r0, #16]
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
     e90:	f880 4072 	strb.w	r4, [r0, #114]	; 0x72
    {
        this_i2c->is_transaction_pending = 1u;
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
     e94:	bf18      	it	ne
     e96:	615c      	strne	r4, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
     e98:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
    this_i2c->options = options;

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    {
        this_i2c->is_transaction_pending = 1u;
     e9c:	bf08      	it	eq
     e9e:	f880 c071 	strbeq.w	ip, [r0, #113]	; 0x71
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
     ea2:	2b01      	cmp	r3, #1
    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;

    this_i2c->dir = WRITE_DIR;

    this_i2c->master_tx_buffer = write_buffer;
     ea4:	6202      	str	r2, [r0, #32]

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
     ea6:	6041      	str	r1, [r0, #4]

    this_i2c->dir = WRITE_DIR;

    this_i2c->master_tx_buffer = write_buffer;
    this_i2c->master_tx_size = write_size;
    this_i2c->master_tx_idx = 0u;
     ea8:	6285      	str	r5, [r0, #40]	; 0x28
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;

    this_i2c->dir = WRITE_DIR;
     eaa:	62c5      	str	r5, [r0, #44]	; 0x2c
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
     eac:	7c42      	ldrb	r2, [r0, #17]
     eae:	d011      	beq.n	ed4 <MSS_I2C_write+0x78>
     eb0:	f002 031f 	and.w	r3, r2, #31
     eb4:	2001      	movs	r0, #1
     eb6:	fa10 f103 	lsls.w	r1, r0, r3
     eba:	b252      	sxtb	r2, r2
     ebc:	0952      	lsrs	r2, r2, #5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     ebe:	f24e 1300 	movw	r3, #57600	; 0xe100
     ec2:	f2ce 0300 	movt	r3, #57344	; 0xe000
     ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
     eca:	f386 8810 	msr	PRIMASK, r6

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );

    restore_interrupts( primask );
}
     ece:	b002      	add	sp, #8
     ed0:	bcf0      	pop	{r4, r5, r6, r7}
     ed2:	4770      	bx	lr

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     ed4:	f002 011f 	and.w	r1, r2, #31
     ed8:	fa13 f101 	lsls.w	r1, r3, r1
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
     edc:	6984      	ldr	r4, [r0, #24]
        stat_ctrl = this_i2c->hw_reg->STATUS;
     ede:	6943      	ldr	r3, [r0, #20]
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
     ee0:	2000      	movs	r0, #0
     ee2:	60e0      	str	r0, [r4, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
     ee4:	7918      	ldrb	r0, [r3, #4]
     ee6:	b252      	sxtb	r2, r2
     ee8:	f88d 0007 	strb.w	r0, [sp, #7]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
     eec:	f89d c007 	ldrb.w	ip, [sp, #7]
     ef0:	0952      	lsrs	r2, r2, #5
     ef2:	f24e 1300 	movw	r3, #57600	; 0xe100
     ef6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     efa:	f102 0060 	add.w	r0, r2, #96	; 0x60
     efe:	f88d c007 	strb.w	ip, [sp, #7]
     f02:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
     f06:	e7da      	b.n	ebe <MSS_I2C_write+0x62>

00000f08 <MSS_I2C_write_read>:
    uint16_t offset_size,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
     f08:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
     f0c:	b082      	sub	sp, #8
     f0e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
    ASSERT(offset_size > 0u);
    ASSERT(addr_offset != (const uint8_t *)0);
    ASSERT(read_size > 0u);
    ASSERT(read_buffer != (uint8_t *)0);

    if((read_size > 0u) && (offset_size > 0u))
     f12:	1e1d      	subs	r5, r3, #0
     f14:	bf18      	it	ne
     f16:	2501      	movne	r5, #1
     f18:	2c00      	cmp	r4, #0
     f1a:	bf0c      	ite	eq
     f1c:	2500      	moveq	r5, #0
     f1e:	f005 0501 	andne.w	r5, r5, #1
    uint16_t offset_size,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
     f22:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
    ASSERT(offset_size > 0u);
    ASSERT(addr_offset != (const uint8_t *)0);
    ASSERT(read_size > 0u);
    ASSERT(read_buffer != (uint8_t *)0);

    if((read_size > 0u) && (offset_size > 0u))
     f26:	2d00      	cmp	r5, #0
     f28:	d03a      	beq.n	fa0 <MSS_I2C_write_read+0x98>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f2a:	f3ef 8810 	mrs	r8, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     f2e:	2601      	movs	r6, #1
     f30:	f386 8810 	msr	PRIMASK, r6
        volatile uint8_t stat_ctrl;

        primask = disable_interrupts();

        /* Update the transaction only when there is no transaction going on I2C */
        if( this_i2c->transaction == NO_TRANSACTION)
     f34:	7a05      	ldrb	r5, [r0, #8]
     f36:	b90d      	cbnz	r5, f3c <MSS_I2C_write_read+0x34>
        {
            this_i2c->transaction = MASTER_RANDOM_READ_TRANSACTION;
     f38:	2703      	movs	r7, #3
     f3a:	7207      	strb	r7, [r0, #8]
        this_i2c->master_rx_buffer = read_buffer;
        this_i2c->master_rx_size = read_size;
        this_i2c->master_rx_idx = 0u;

        /* Set I2C status in progress */
        this_i2c->master_status = MSS_I2C_IN_PROGRESS;
     f3c:	2601      	movs	r6, #1

        /* Update the Pending transaction information so that transaction can restarted */
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;

        /* Update target address */
        this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
     f3e:	40b1      	lsls	r1, r6
        this_i2c->master_rx_buffer = read_buffer;
        this_i2c->master_rx_size = read_size;
        this_i2c->master_rx_idx = 0u;

        /* Set I2C status in progress */
        this_i2c->master_status = MSS_I2C_IN_PROGRESS;
     f40:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
        {
            this_i2c->transaction = MASTER_RANDOM_READ_TRANSACTION;
        }

        /* Update the Pending transaction information so that transaction can restarted */
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;
     f44:	f04f 0a03 	mov.w	sl, #3

        /* Set I2C status in progress */
        this_i2c->master_status = MSS_I2C_IN_PROGRESS;
        this_i2c->options = options;

        if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
     f48:	f890 705c 	ldrb.w	r7, [r0, #92]	; 0x5c
        {
            this_i2c->transaction = MASTER_RANDOM_READ_TRANSACTION;
        }

        /* Update the Pending transaction information so that transaction can restarted */
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;
     f4c:	f880 a072 	strb.w	sl, [r0, #114]	; 0x72

        /* Update target address */
        this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;

        this_i2c->dir = WRITE_DIR;
        this_i2c->master_tx_buffer = addr_offset;
     f50:	6202      	str	r2, [r0, #32]
        this_i2c->master_tx_size = offset_size;
     f52:	6243      	str	r3, [r0, #36]	; 0x24
        this_i2c->master_tx_idx = 0u;

        this_i2c->master_rx_buffer = read_buffer;
     f54:	9b08      	ldr	r3, [sp, #32]
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;

        /* Update target address */
        this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;

        this_i2c->dir = WRITE_DIR;
     f56:	2500      	movs	r5, #0

        /* Set I2C status in progress */
        this_i2c->master_status = MSS_I2C_IN_PROGRESS;
        this_i2c->options = options;

        if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
     f58:	42b7      	cmp	r7, r6
        this_i2c->dir = WRITE_DIR;
        this_i2c->master_tx_buffer = addr_offset;
        this_i2c->master_tx_size = offset_size;
        this_i2c->master_tx_idx = 0u;

        this_i2c->master_rx_buffer = read_buffer;
     f5a:	6303      	str	r3, [r0, #48]	; 0x30
        {
            this_i2c->is_transaction_pending = 1u;
        }
        else
        {
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
     f5c:	bf18      	it	ne
     f5e:	6983      	ldrne	r3, [r0, #24]
        this_i2c->master_rx_size = read_size;
        this_i2c->master_rx_idx = 0u;

        /* Set I2C status in progress */
        this_i2c->master_status = MSS_I2C_IN_PROGRESS;
        this_i2c->options = options;
     f60:	f880 c010 	strb.w	ip, [r0, #16]
        {
            this_i2c->is_transaction_pending = 1u;
        }
        else
        {
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
     f64:	bf18      	it	ne
     f66:	615e      	strne	r6, [r3, #20]
        /*
         * Clear interrupts if required (depends on repeated starts).
         * Since the Bus is on hold, only then prior status needs to
         * be cleared.
         */
        if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
     f68:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
        this_i2c->master_status = MSS_I2C_IN_PROGRESS;
        this_i2c->options = options;

        if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
        {
            this_i2c->is_transaction_pending = 1u;
     f6c:	bf08      	it	eq
     f6e:	f880 7071 	strbeq.w	r7, [r0, #113]	; 0x71
        /*
         * Clear interrupts if required (depends on repeated starts).
         * Since the Bus is on hold, only then prior status needs to
         * be cleared.
         */
        if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
     f72:	2b01      	cmp	r3, #1

        /* Update the Pending transaction information so that transaction can restarted */
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;

        /* Update target address */
        this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
     f74:	6041      	str	r1, [r0, #4]
        this_i2c->master_tx_buffer = addr_offset;
        this_i2c->master_tx_size = offset_size;
        this_i2c->master_tx_idx = 0u;

        this_i2c->master_rx_buffer = read_buffer;
        this_i2c->master_rx_size = read_size;
     f76:	6344      	str	r4, [r0, #52]	; 0x34
        this_i2c->master_rx_idx = 0u;
     f78:	6385      	str	r5, [r0, #56]	; 0x38
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;

        /* Update target address */
        this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;

        this_i2c->dir = WRITE_DIR;
     f7a:	62c5      	str	r5, [r0, #44]	; 0x2c
        this_i2c->master_tx_buffer = addr_offset;
        this_i2c->master_tx_size = offset_size;
        this_i2c->master_tx_idx = 0u;
     f7c:	6285      	str	r5, [r0, #40]	; 0x28
        /*
         * Clear interrupts if required (depends on repeated starts).
         * Since the Bus is on hold, only then prior status needs to
         * be cleared.
         */
        if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
     f7e:	7c42      	ldrb	r2, [r0, #17]
     f80:	d012      	beq.n	fa8 <MSS_I2C_write_read+0xa0>
     f82:	f002 031f 	and.w	r3, r2, #31
     f86:	2001      	movs	r0, #1
     f88:	fa10 f103 	lsls.w	r1, r0, r3
     f8c:	b252      	sxtb	r2, r2
     f8e:	0952      	lsrs	r2, r2, #5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     f90:	f24e 1300 	movw	r3, #57600	; 0xe100
     f94:	f2ce 0300 	movt	r3, #57344	; 0xe000
     f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
     f9c:	f388 8810 	msr	PRIMASK, r8
        /* Enable the interrupt. ( Re-enable) */
        NVIC_EnableIRQ( this_i2c->irqn );

        restore_interrupts( primask );
    }
}
     fa0:	b002      	add	sp, #8
     fa2:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
     fa6:	4770      	bx	lr

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     fa8:	f002 011f 	and.w	r1, r2, #31
     fac:	fa13 f101 	lsls.w	r1, r3, r1
         * Since the Bus is on hold, only then prior status needs to
         * be cleared.
         */
        if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
        {
            this_i2c->hw_reg_bit->CTRL_SI = 0u;
     fb0:	6984      	ldr	r4, [r0, #24]
            stat_ctrl = this_i2c->hw_reg->STATUS;
     fb2:	6943      	ldr	r3, [r0, #20]
         * Since the Bus is on hold, only then prior status needs to
         * be cleared.
         */
        if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
        {
            this_i2c->hw_reg_bit->CTRL_SI = 0u;
     fb4:	2000      	movs	r0, #0
     fb6:	60e0      	str	r0, [r4, #12]
            stat_ctrl = this_i2c->hw_reg->STATUS;
     fb8:	7918      	ldrb	r0, [r3, #4]
     fba:	b252      	sxtb	r2, r2
     fbc:	f88d 0007 	strb.w	r0, [sp, #7]
            stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
     fc0:	f89d c007 	ldrb.w	ip, [sp, #7]
     fc4:	0952      	lsrs	r2, r2, #5
     fc6:	f24e 1300 	movw	r3, #57600	; 0xe100
     fca:	f2ce 0300 	movt	r3, #57344	; 0xe000
     fce:	f102 0060 	add.w	r0, r2, #96	; 0x60
     fd2:	f88d c007 	strb.w	ip, [sp, #7]
     fd6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
     fda:	e7d9      	b.n	f90 <MSS_I2C_write_read+0x88>

00000fdc <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
     fdc:	4603      	mov	r3, r0
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
    
    this_i2c->master_timeout_ms = timeout_ms;
     fde:	6401      	str	r1, [r0, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
     fe0:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
     fe4:	2801      	cmp	r0, #1
     fe6:	d0fb      	beq.n	fe0 <MSS_I2C_wait_complete+0x4>

    return i2c_status;
}
     fe8:	4770      	bx	lr
     fea:	bf00      	nop

00000fec <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
     fec:	b530      	push	{r4, r5, lr}
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );

    status = this_i2c->hw_reg->STATUS;
     fee:	6941      	ldr	r1, [r0, #20]
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
     ff0:	4604      	mov	r4, r0
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );

    status = this_i2c->hw_reg->STATUS;
     ff2:	7908      	ldrb	r0, [r1, #4]
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
     ff4:	b083      	sub	sp, #12
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );

    status = this_i2c->hw_reg->STATUS;
     ff6:	f88d 0007 	strb.w	r0, [sp, #7]

    switch( status )
     ffa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ffe:	3b08      	subs	r3, #8
    1000:	2bd0      	cmp	r3, #208	; 0xd0
    1002:	f200 81cb 	bhi.w	139c <MAIN_STACK_SIZE+0x39c>
    1006:	e8df f013 	tbh	[pc, r3, lsl #1]
    100a:	01aa      	.short	0x01aa
    100c:	01c901c9 	.word	0x01c901c9
    1010:	01c901c9 	.word	0x01c901c9
    1014:	01c901c9 	.word	0x01c901c9
    1018:	01aa01c9 	.word	0x01aa01c9
    101c:	01c901c9 	.word	0x01c901c9
    1020:	01c901c9 	.word	0x01c901c9
    1024:	01c901c9 	.word	0x01c901c9
    1028:	01dd01c9 	.word	0x01dd01c9
    102c:	01c901c9 	.word	0x01c901c9
    1030:	01c901c9 	.word	0x01c901c9
    1034:	01c901c9 	.word	0x01c901c9
    1038:	00d101c9 	.word	0x00d101c9
    103c:	01c901c9 	.word	0x01c901c9
    1040:	01c901c9 	.word	0x01c901c9
    1044:	01c901c9 	.word	0x01c901c9
    1048:	01dd01c9 	.word	0x01dd01c9
    104c:	01c901c9 	.word	0x01c901c9
    1050:	01c901c9 	.word	0x01c901c9
    1054:	01c901c9 	.word	0x01c901c9
    1058:	00d101c9 	.word	0x00d101c9
    105c:	01c901c9 	.word	0x01c901c9
    1060:	01c901c9 	.word	0x01c901c9
    1064:	01c901c9 	.word	0x01c901c9
    1068:	018901c9 	.word	0x018901c9
    106c:	01c901c9 	.word	0x01c901c9
    1070:	01c901c9 	.word	0x01c901c9
    1074:	01c901c9 	.word	0x01c901c9
    1078:	00e601c9 	.word	0x00e601c9
    107c:	01c901c9 	.word	0x01c901c9
    1080:	01c901c9 	.word	0x01c901c9
    1084:	01c901c9 	.word	0x01c901c9
    1088:	00d101c9 	.word	0x00d101c9
    108c:	01c901c9 	.word	0x01c901c9
    1090:	01c901c9 	.word	0x01c901c9
    1094:	01c901c9 	.word	0x01c901c9
    1098:	014101c9 	.word	0x014101c9
    109c:	01c901c9 	.word	0x01c901c9
    10a0:	01c901c9 	.word	0x01c901c9
    10a4:	01c901c9 	.word	0x01c901c9
    10a8:	015101c9 	.word	0x015101c9
    10ac:	01c901c9 	.word	0x01c901c9
    10b0:	01c901c9 	.word	0x01c901c9
    10b4:	01c901c9 	.word	0x01c901c9
    10b8:	00f101c9 	.word	0x00f101c9
    10bc:	01c901c9 	.word	0x01c901c9
    10c0:	01c901c9 	.word	0x01c901c9
    10c4:	01c901c9 	.word	0x01c901c9
    10c8:	00ee01c9 	.word	0x00ee01c9
    10cc:	01c901c9 	.word	0x01c901c9
    10d0:	01c901c9 	.word	0x01c901c9
    10d4:	01c901c9 	.word	0x01c901c9
    10d8:	00f101c9 	.word	0x00f101c9
    10dc:	01c901c9 	.word	0x01c901c9
    10e0:	01c901c9 	.word	0x01c901c9
    10e4:	01c901c9 	.word	0x01c901c9
    10e8:	00ee01c9 	.word	0x00ee01c9
    10ec:	01c901c9 	.word	0x01c901c9
    10f0:	01c901c9 	.word	0x01c901c9
    10f4:	01c901c9 	.word	0x01c901c9
    10f8:	016f01c9 	.word	0x016f01c9
    10fc:	01c901c9 	.word	0x01c901c9
    1100:	01c901c9 	.word	0x01c901c9
    1104:	01c901c9 	.word	0x01c901c9
    1108:	010101c9 	.word	0x010101c9
    110c:	01c901c9 	.word	0x01c901c9
    1110:	01c901c9 	.word	0x01c901c9
    1114:	01c901c9 	.word	0x01c901c9
    1118:	016f01c9 	.word	0x016f01c9
    111c:	01c901c9 	.word	0x01c901c9
    1120:	01c901c9 	.word	0x01c901c9
    1124:	01c901c9 	.word	0x01c901c9
    1128:	010101c9 	.word	0x010101c9
    112c:	01c901c9 	.word	0x01c901c9
    1130:	01c901c9 	.word	0x01c901c9
    1134:	01c901c9 	.word	0x01c901c9
    1138:	010e01c9 	.word	0x010e01c9
    113c:	01c901c9 	.word	0x01c901c9
    1140:	01c901c9 	.word	0x01c901c9
    1144:	01c901c9 	.word	0x01c901c9
    1148:	012501c9 	.word	0x012501c9
    114c:	01c901c9 	.word	0x01c901c9
    1150:	01c901c9 	.word	0x01c901c9
    1154:	01c901c9 	.word	0x01c901c9
    1158:	012501c9 	.word	0x012501c9
    115c:	01c901c9 	.word	0x01c901c9
    1160:	01c901c9 	.word	0x01c901c9
    1164:	01c901c9 	.word	0x01c901c9
    1168:	012501c9 	.word	0x012501c9
    116c:	01c901c9 	.word	0x01c901c9
    1170:	01c901c9 	.word	0x01c901c9
    1174:	01c901c9 	.word	0x01c901c9
    1178:	019c01c9 	.word	0x019c01c9
    117c:	01c901c9 	.word	0x01c901c9
    1180:	01c901c9 	.word	0x01c901c9
    1184:	01c901c9 	.word	0x01c901c9
    1188:	019c01c9 	.word	0x019c01c9
    118c:	01c901c9 	.word	0x01c901c9
    1190:	01c901c9 	.word	0x01c901c9
    1194:	01c901c9 	.word	0x01c901c9
    1198:	01c901c9 	.word	0x01c901c9
    119c:	01c901c9 	.word	0x01c901c9
    11a0:	01c901c9 	.word	0x01c901c9
    11a4:	01c901c9 	.word	0x01c901c9
    11a8:	018d01c9 	.word	0x018d01c9
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
    11ac:	69a3      	ldr	r3, [r4, #24]
    11ae:	2201      	movs	r2, #1
    11b0:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
    11b2:	f04f 0c02 	mov.w	ip, #2
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
    11b6:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
            }
            break;
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
            this_i2c->master_status = MSS_I2C_FAILED;
    11ba:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    11be:	f04f 0c00 	mov.w	ip, #0
    11c2:	f884 c008 	strb.w	ip, [r4, #8]
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
    11c6:	b960      	cbnz	r0, 11e2 <MAIN_STACK_SIZE+0x1e2>
    }
    
    if ( clear_irq )
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
    11c8:	2000      	movs	r0, #0
    11ca:	60d8      	str	r0, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
    11cc:	790b      	ldrb	r3, [r1, #4]
    11ce:	f88d 3007 	strb.w	r3, [sp, #7]
}
    11d2:	b003      	add	sp, #12
    11d4:	bd30      	pop	{r4, r5, pc}
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
    11d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    11d8:	2a01      	cmp	r2, #1
    11da:	f240 8169 	bls.w	14b0 <MAIN_STACK_SIZE+0x4b0>
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
    11de:	69a3      	ldr	r3, [r4, #24]
    11e0:	2201      	movs	r2, #1
    11e2:	609a      	str	r2, [r3, #8]
    11e4:	e7f0      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
    11e6:	2301      	movs	r3, #1
    11e8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
    11ec:	2204      	movs	r2, #4
            this_i2c->random_read_addr = 0u;

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
    11ee:	69a3      	ldr	r3, [r4, #24]
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
    11f0:	7222      	strb	r2, [r4, #8]
            this_i2c->random_read_addr = 0u;

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
    11f2:	6958      	ldr	r0, [r3, #20]

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
            this_i2c->slave_rx_idx = 0u;
    11f4:	2200      	movs	r2, #0
    11f6:	65a2      	str	r2, [r4, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
    11f8:	60e2      	str	r2, [r4, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
    11fa:	b118      	cbz	r0, 1204 <MAIN_STACK_SIZE+0x204>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
                this_i2c->is_transaction_pending = 1u;
    11fc:	2001      	movs	r0, #1
             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
    11fe:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
    1200:	f884 0071 	strb.w	r0, [r4, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
    1204:	2201      	movs	r2, #1
    1206:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
    120a:	e7dd      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
            break;
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    120c:	69a3      	ldr	r3, [r4, #24]
    120e:	2001      	movs	r0, #1
    1210:	6098      	str	r0, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
            this_i2c->slave_status = MSS_I2C_SUCCESS;
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    1212:	f894 5071 	ldrb.w	r5, [r4, #113]	; 0x71
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
            
            this_i2c->transaction = NO_TRANSACTION;
    1216:	2200      	movs	r2, #0
            this_i2c->slave_status = MSS_I2C_SUCCESS;
    1218:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
            
            this_i2c->transaction = NO_TRANSACTION;
    121c:	7222      	strb	r2, [r4, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    121e:	2d00      	cmp	r5, #0
    1220:	d0d2      	beq.n	11c8 <MAIN_STACK_SIZE+0x1c8>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
    1222:	6158      	str	r0, [r3, #20]
    1224:	e7d0      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
    1226:	7a22      	ldrb	r2, [r4, #8]
    1228:	2a04      	cmp	r2, #4
    122a:	f000 8119 	beq.w	1460 <MAIN_STACK_SIZE+0x460>
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
    122e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
    1232:	2000      	movs	r0, #0
    1234:	64e0      	str	r0, [r4, #76]	; 0x4c
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
    1236:	2b00      	cmp	r3, #0
    1238:	f040 8147 	bne.w	14ca <MAIN_STACK_SIZE+0x4ca>
    123c:	69a3      	ldr	r3, [r4, #24]

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    123e:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
                 */
                enable_slave_if_required(this_i2c);
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
    1242:	2000      	movs	r0, #0
    1244:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    1248:	b10a      	cbz	r2, 124e <MAIN_STACK_SIZE+0x24e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
    124a:	2201      	movs	r2, #1
    124c:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    124e:	2000      	movs	r0, #0
    1250:	7220      	strb	r0, [r4, #8]
            break;
    1252:	e7b9      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
    1254:	f89d c007 	ldrb.w	ip, [sp, #7]
    1258:	f1bc 0fa8 	cmp.w	ip, #168	; 0xa8
    125c:	f000 8118 	beq.w	1490 <MAIN_STACK_SIZE+0x490>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
                    this_i2c->is_transaction_pending = 1u;
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
    1260:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1262:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    1264:	4283      	cmp	r3, r0
    1266:	f080 80e4 	bcs.w	1432 <MAIN_STACK_SIZE+0x432>
                this_i2c->hw_reg->DATA = 0xFFu;
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
    126a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    126c:	1c5a      	adds	r2, r3, #1
    126e:	f810 c003 	ldrb.w	ip, [r0, r3]
    1272:	f881 c008 	strb.w	ip, [r1, #8]
    1276:	64e2      	str	r2, [r4, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
    1278:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    127a:	4291      	cmp	r1, r2
    127c:	f200 80c3 	bhi.w	1406 <MAIN_STACK_SIZE+0x406>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
    1280:	69a3      	ldr	r3, [r4, #24]
    1282:	2200      	movs	r2, #0
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
    1284:	64e2      	str	r2, [r4, #76]	; 0x4c
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
    1286:	609a      	str	r2, [r3, #8]
    1288:	6961      	ldr	r1, [r4, #20]
    128a:	e79d      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
            enable_slave_if_required(this_i2c);
            break;
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
    128c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    128e:	7a08      	ldrb	r0, [r1, #8]
    1290:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1292:	1c53      	adds	r3, r2, #1
    1294:	5488      	strb	r0, [r1, r2]

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
    1296:	6b62      	ldr	r2, [r4, #52]	; 0x34
            enable_slave_if_required(this_i2c);
            break;
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
    1298:	63a3      	str	r3, [r4, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
    129a:	1e51      	subs	r1, r2, #1
    129c:	428b      	cmp	r3, r1
    129e:	f0c0 80b2 	bcc.w	1406 <MAIN_STACK_SIZE+0x406>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
    12a2:	69a3      	ldr	r3, [r4, #24]
    12a4:	2000      	movs	r0, #0
    12a6:	6098      	str	r0, [r3, #8]
    12a8:	6961      	ldr	r1, [r4, #20]
    12aa:	e78d      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
            }
            break;
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
    12ac:	7a09      	ldrb	r1, [r1, #8]
    12ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
    12b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    12b2:	5411      	strb	r1, [r2, r0]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
    12b4:	f894 c010 	ldrb.w	ip, [r4, #16]
    12b8:	f00c 0301 	and.w	r3, ip, #1

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
    12bc:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
            if ( hold_bus == 0u )
    12c0:	2b00      	cmp	r3, #0
    12c2:	f040 80a3 	bne.w	140c <MAIN_STACK_SIZE+0x40c>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
    12c6:	69a3      	ldr	r3, [r4, #24]
    12c8:	2201      	movs	r2, #1
    12ca:	611a      	str	r2, [r3, #16]
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
    12cc:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    12d0:	b101      	cbz	r1, 12d4 <MAIN_STACK_SIZE+0x2d4>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
    12d2:	609a      	str	r2, [r3, #8]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    12d4:	2000      	movs	r0, #0
            this_i2c->master_status = MSS_I2C_SUCCESS;
    12d6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    12da:	7220      	strb	r0, [r4, #8]
    12dc:	6961      	ldr	r1, [r4, #20]


            break;
    }
    
    if ( clear_irq )
    12de:	2a00      	cmp	r2, #0
    12e0:	f43f af74 	beq.w	11cc <MAIN_STACK_SIZE+0x1cc>
    12e4:	69a3      	ldr	r3, [r4, #24]
    12e6:	e76f      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
    12e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
    12ea:	2a00      	cmp	r2, #0
    12ec:	f000 80eb 	beq.w	14c6 <MAIN_STACK_SIZE+0x4c6>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
    12f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
    12f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    12f4:	4283      	cmp	r3, r0
    12f6:	d20d      	bcs.n	1314 <MAIN_STACK_SIZE+0x314>
            {
                data = this_i2c->hw_reg->DATA;
    12f8:	f891 c008 	ldrb.w	ip, [r1, #8]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
    12fc:	1c58      	adds	r0, r3, #1
    12fe:	f802 c003 	strb.w	ip, [r2, r3]
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
    1302:	68e2      	ldr	r2, [r4, #12]
    1304:	6961      	ldr	r1, [r4, #20]
    1306:	eb0c 2302 	add.w	r3, ip, r2, lsl #8
    130a:	60e3      	str	r3, [r4, #12]
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = this_i2c->hw_reg->DATA;
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
    130c:	65a0      	str	r0, [r4, #88]	; 0x58
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
    130e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1310:	4283      	cmp	r3, r0
    1312:	d8e7      	bhi.n	12e4 <MAIN_STACK_SIZE+0x2e4>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
    1314:	69a3      	ldr	r3, [r4, #24]
    1316:	2000      	movs	r0, #0
    1318:	6098      	str	r0, [r3, #8]
    131a:	e755      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
            }
            break;
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    131c:	69a3      	ldr	r3, [r4, #24]
    131e:	2001      	movs	r0, #1
    1320:	6158      	str	r0, [r3, #20]
            break;
    1322:	e751      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
             */
            this_i2c->slave_tx_idx = 0u;
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    1324:	f894 c05c 	ldrb.w	ip, [r4, #92]	; 0x5c
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
    1328:	2300      	movs	r3, #0
             */
            this_i2c->slave_tx_idx = 0u;
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    132a:	f1bc 0f01 	cmp.w	ip, #1
            this_i2c->transaction = NO_TRANSACTION;
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
    132e:	64e3      	str	r3, [r4, #76]	; 0x4c
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
    1330:	7223      	strb	r3, [r4, #8]
             */
            this_i2c->slave_tx_idx = 0u;
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    1332:	f000 8091 	beq.w	1458 <MAIN_STACK_SIZE+0x458>
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
    1336:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    133a:	2a00      	cmp	r2, #0
    133c:	f47f af4f 	bne.w	11de <MAIN_STACK_SIZE+0x1de>
    1340:	e7d0      	b.n	12e4 <MAIN_STACK_SIZE+0x2e4>
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    1342:	69a3      	ldr	r3, [r4, #24]
    1344:	2001      	movs	r0, #1
    1346:	6098      	str	r0, [r3, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    1348:	f894 5071 	ldrb.w	r5, [r4, #113]	; 0x71
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
    134c:	2200      	movs	r2, #0
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
    134e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
    1352:	64e2      	str	r2, [r4, #76]	; 0x4c

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    1354:	2d00      	cmp	r5, #0
    1356:	f43f af7a 	beq.w	124e <MAIN_STACK_SIZE+0x24e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
    135a:	6158      	str	r0, [r3, #20]
    135c:	e777      	b.n	124e <MAIN_STACK_SIZE+0x24e>
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
    135e:	69a2      	ldr	r2, [r4, #24]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
    1360:	f894 c004 	ldrb.w	ip, [r4, #4]
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
    1364:	2000      	movs	r0, #0
    1366:	6150      	str	r0, [r2, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
    1368:	f881 c008 	strb.w	ip, [r1, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
    136c:	69a3      	ldr	r3, [r4, #24]
    136e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1370:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
    1374:	2a00      	cmp	r2, #0
    1376:	d069      	beq.n	144c <MAIN_STACK_SIZE+0x44c>
            {
                this_i2c->master_tx_idx = 0u;
            }
            else if ( this_i2c->dir == READ_DIR)
    1378:	2a01      	cmp	r2, #1
            {
                this_i2c->master_rx_idx = 0u;
    137a:	bf08      	it	eq
    137c:	63a0      	streq	r0, [r4, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
    137e:	f894 1071 	ldrb.w	r1, [r4, #113]	; 0x71
    1382:	b111      	cbz	r1, 138a <MAIN_STACK_SIZE+0x38a>
            {
                this_i2c->is_transaction_pending = 0u;
    1384:	2000      	movs	r0, #0
    1386:	f884 0071 	strb.w	r0, [r4, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
    138a:	f894 c072 	ldrb.w	ip, [r4, #114]	; 0x72
    138e:	7a22      	ldrb	r2, [r4, #8]
    1390:	6961      	ldr	r1, [r4, #20]
    1392:	4562      	cmp	r2, ip
            {
                this_i2c->transaction = this_i2c->pending_transaction;
    1394:	bf18      	it	ne
    1396:	f884 c008 	strbne.w	ip, [r4, #8]
    139a:	e715      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
    139c:	69a3      	ldr	r3, [r4, #24]
    139e:	2200      	movs	r2, #0
    13a0:	615a      	str	r2, [r3, #20]
             */
            this_i2c->slave_tx_idx = 0u;
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
    13a2:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
    13a6:	64e2      	str	r2, [r4, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
    13a8:	f1bc 0f01 	cmp.w	ip, #1
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    13ac:	7222      	strb	r2, [r4, #8]
             */
            this_i2c->slave_tx_idx = 0u;
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
    13ae:	d04f      	beq.n	1450 <MAIN_STACK_SIZE+0x450>
            {
                this_i2c->master_status = MSS_I2C_FAILED;
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    13b0:	f894 c05c 	ldrb.w	ip, [r4, #92]	; 0x5c
    13b4:	f1bc 0f01 	cmp.w	ip, #1
    13b8:	f47f af06 	bne.w	11c8 <MAIN_STACK_SIZE+0x1c8>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
    13bc:	2202      	movs	r2, #2
    13be:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    13c2:	e701      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
            break;
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
    13c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    13c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    13c8:	4293      	cmp	r3, r2
    13ca:	d337      	bcc.n	143c <MAIN_STACK_SIZE+0x43c>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
    13cc:	f894 c008 	ldrb.w	ip, [r4, #8]
    13d0:	f1bc 0f03 	cmp.w	ip, #3
    13d4:	f000 808e 	beq.w	14f4 <MAIN_STACK_SIZE+0x4f4>
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
    13d8:	7c20      	ldrb	r0, [r4, #16]
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
    13da:	2200      	movs	r2, #0
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
    13dc:	f000 0301 	and.w	r3, r0, #1
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
    13e0:	7222      	strb	r2, [r4, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
    13e2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                if ( hold_bus == 0u )
    13e6:	2b00      	cmp	r3, #0
    13e8:	d173      	bne.n	14d2 <MAIN_STACK_SIZE+0x4d2>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
    13ea:	69a3      	ldr	r3, [r4, #24]
    13ec:	2201      	movs	r2, #1
    13ee:	611a      	str	r2, [r3, #16]
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
    13f0:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    13f4:	b100      	cbz	r0, 13f8 <MAIN_STACK_SIZE+0x3f8>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
    13f6:	609a      	str	r2, [r3, #8]
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
    13f8:	2300      	movs	r3, #0
    13fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c


            break;
    }
    
    if ( clear_irq )
    13fe:	2a00      	cmp	r2, #0
    1400:	f43f aee4 	beq.w	11cc <MAIN_STACK_SIZE+0x1cc>
    1404:	e76e      	b.n	12e4 <MAIN_STACK_SIZE+0x2e4>
    1406:	69a3      	ldr	r3, [r4, #24]
    1408:	6961      	ldr	r1, [r4, #20]
    140a:	e6dd      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
    140c:	f894 c011 	ldrb.w	ip, [r4, #17]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    1410:	2101      	movs	r1, #1
    1412:	f00c 031f 	and.w	r3, ip, #31
    1416:	fa11 f003 	lsls.w	r0, r1, r3
    141a:	fa4f f28c 	sxtb.w	r2, ip
    141e:	0952      	lsrs	r2, r2, #5
    1420:	f24e 1300 	movw	r3, #57600	; 0xe100
    1424:	3220      	adds	r2, #32
    1426:	f2ce 0300 	movt	r3, #57344	; 0xe000
    142a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    142e:	2200      	movs	r2, #0
    1430:	e750      	b.n	12d4 <MAIN_STACK_SIZE+0x2d4>
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
    1432:	f04f 33ff 	mov.w	r3, #4294967295
    1436:	720b      	strb	r3, [r1, #8]
    1438:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    143a:	e71d      	b.n	1278 <MAIN_STACK_SIZE+0x278>
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
    143c:	6a20      	ldr	r0, [r4, #32]
    143e:	1c5a      	adds	r2, r3, #1
    1440:	5cc3      	ldrb	r3, [r0, r3]
    1442:	720b      	strb	r3, [r1, #8]
    1444:	69a3      	ldr	r3, [r4, #24]
    1446:	62a2      	str	r2, [r4, #40]	; 0x28
    1448:	6961      	ldr	r1, [r4, #20]
    144a:	e6bd      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
            if ( this_i2c->dir == WRITE_DIR )
            {
                this_i2c->master_tx_idx = 0u;
    144c:	62a2      	str	r2, [r4, #40]	; 0x28
    144e:	e796      	b.n	137e <MAIN_STACK_SIZE+0x37e>
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
            {
                this_i2c->master_status = MSS_I2C_FAILED;
    1450:	2002      	movs	r0, #2
    1452:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    1456:	e7ab      	b.n	13b0 <MAIN_STACK_SIZE+0x3b0>
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
    1458:	2002      	movs	r0, #2
    145a:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    145e:	e76a      	b.n	1336 <MAIN_STACK_SIZE+0x336>
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
    1460:	6e23      	ldr	r3, [r4, #96]	; 0x60
    1462:	6da2      	ldr	r2, [r4, #88]	; 0x58
    1464:	429a      	cmp	r2, r3
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
    1466:	bf04      	itt	eq
    1468:	68e3      	ldreq	r3, [r4, #12]
    146a:	64e3      	streq	r3, [r4, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
    146c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    146e:	2b00      	cmp	r3, #0
    1470:	d02b      	beq.n	14ca <MAIN_STACK_SIZE+0x4ca>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
    1472:	b292      	uxth	r2, r2
    1474:	4620      	mov	r0, r4
    1476:	6d21      	ldr	r1, [r4, #80]	; 0x50
    1478:	4798      	blx	r3
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
    147a:	2800      	cmp	r0, #0
    147c:	d13f      	bne.n	14fe <MAIN_STACK_SIZE+0x4fe>
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
    147e:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    1482:	2900      	cmp	r1, #0
    1484:	d142      	bne.n	150c <MAIN_STACK_SIZE+0x50c>
    1486:	69a3      	ldr	r3, [r4, #24]
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    1488:	2201      	movs	r2, #1
    148a:	609a      	str	r2, [r3, #8]
    148c:	6961      	ldr	r1, [r4, #20]
    148e:	e6d6      	b.n	123e <MAIN_STACK_SIZE+0x23e>
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
    1490:	2505      	movs	r5, #5
                this_i2c->random_read_addr = 0u;

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
    1492:	2301      	movs	r3, #1

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
    1494:	69a2      	ldr	r2, [r4, #24]
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
    1496:	7225      	strb	r5, [r4, #8]
                this_i2c->random_read_addr = 0u;

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
    1498:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
    149c:	6955      	ldr	r5, [r2, #20]
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
                this_i2c->random_read_addr = 0u;
    149e:	2000      	movs	r0, #0
    14a0:	60e0      	str	r0, [r4, #12]
                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
    14a2:	2d00      	cmp	r5, #0
    14a4:	f43f aedc 	beq.w	1260 <MAIN_STACK_SIZE+0x260>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
    14a8:	6150      	str	r0, [r2, #20]
                    this_i2c->is_transaction_pending = 1u;
    14aa:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    14ae:	e6d7      	b.n	1260 <MAIN_STACK_SIZE+0x260>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
            }
            else if(1u == this_i2c->master_rx_size)
    14b0:	f43f af30 	beq.w	1314 <MAIN_STACK_SIZE+0x314>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    14b4:	69a3      	ldr	r3, [r4, #24]
    14b6:	2001      	movs	r0, #1
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
    14b8:	2200      	movs	r2, #0
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    14ba:	6098      	str	r0, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
    14bc:	6118      	str	r0, [r3, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
    14be:	7222      	strb	r2, [r4, #8]
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
    14c0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    14c4:	e680      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
    14c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    14c8:	e721      	b.n	130e <MAIN_STACK_SIZE+0x30e>
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
    14ca:	69a3      	ldr	r3, [r4, #24]
    14cc:	2201      	movs	r2, #1
    14ce:	609a      	str	r2, [r3, #8]
    14d0:	e6b5      	b.n	123e <MAIN_STACK_SIZE+0x23e>
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
                    enable_slave_if_required(this_i2c);
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
    14d2:	f894 c011 	ldrb.w	ip, [r4, #17]
    14d6:	2501      	movs	r5, #1
    14d8:	f00c 001f 	and.w	r0, ip, #31
    14dc:	4085      	lsls	r5, r0
    14de:	fa4f f38c 	sxtb.w	r3, ip
    14e2:	0958      	lsrs	r0, r3, #5
    14e4:	f24e 1300 	movw	r3, #57600	; 0xe100
    14e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    14ec:	3020      	adds	r0, #32
    14ee:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
    14f2:	e781      	b.n	13f8 <MAIN_STACK_SIZE+0x3f8>
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    14f4:	69a3      	ldr	r3, [r4, #24]
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
    14f6:	2201      	movs	r2, #1
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    14f8:	615a      	str	r2, [r3, #20]
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
    14fa:	62e2      	str	r2, [r4, #44]	; 0x2c
    14fc:	e664      	b.n	11c8 <MAIN_STACK_SIZE+0x1c8>
                             enable_slave_if_required(this_i2c);
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
    14fe:	69a3      	ldr	r3, [r4, #24]
    1500:	2100      	movs	r1, #0
    1502:	6099      	str	r1, [r3, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
    1504:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
    1508:	6961      	ldr	r1, [r4, #20]
    150a:	e698      	b.n	123e <MAIN_STACK_SIZE+0x23e>
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
    150c:	69a3      	ldr	r3, [r4, #24]
    150e:	2001      	movs	r0, #1
    1510:	6098      	str	r0, [r3, #8]
    1512:	e7b9      	b.n	1488 <MAIN_STACK_SIZE+0x488>

00001514 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
    1514:	4668      	mov	r0, sp
    1516:	f020 0107 	bic.w	r1, r0, #7
    151a:	468d      	mov	sp, r1
    151c:	b501      	push	{r0, lr}
    mss_i2c_isr( &g_mss_i2c0 );
    151e:	f240 00f4 	movw	r0, #244	; 0xf4
    1522:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1526:	f7ff fd61 	bl	fec <mss_i2c_isr>
}
    152a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    152e:	4685      	mov	sp, r0
    1530:	4770      	bx	lr
    1532:	bf00      	nop

00001534 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
    1534:	4668      	mov	r0, sp
    1536:	f020 0107 	bic.w	r1, r0, #7
    153a:	468d      	mov	sp, r1
    153c:	b501      	push	{r0, lr}
    mss_i2c_isr( &g_mss_i2c1 );
    153e:	f240 1068 	movw	r0, #360	; 0x168
    1542:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1546:	f7ff fd51 	bl	fec <mss_i2c_isr>
}
    154a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    154e:	4685      	mov	sp, r0
    1550:	4770      	bx	lr
    1552:	bf00      	nop

00001554 <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
    1554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1558:	4604      	mov	r4, r0
    155a:	460f      	mov	r7, r1
    155c:	4615      	mov	r5, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    155e:	f3ef 8610 	mrs	r6, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
    1562:	2001      	movs	r0, #1
    1564:	f380 8810 	msr	PRIMASK, r0
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
    1568:	2100      	movs	r1, #0
    156a:	2274      	movs	r2, #116	; 0x74
    156c:	4620      	mov	r0, r4
    156e:	f000 f981 	bl	1874 <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
    1572:	f240 03f4 	movw	r3, #244	; 0xf4
    1576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    157a:	429c      	cmp	r4, r3
        this_i2c->irqn = I2C0_IRQn;
        this_i2c->hw_reg = I2C0;
        this_i2c->hw_reg_bit = I2C0_BITBAND;
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
    157c:	f248 0300 	movw	r3, #32768	; 0x8000
    1580:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1584:	6c99      	ldr	r1, [r3, #72]	; 0x48

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1586:	f24e 1200 	movw	r2, #57600	; 0xe100
     * have an actual value of zero.
     */
    primask = disable_interrupts();
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
    
    if ( this_i2c == &g_mss_i2c0 )
    158a:	d032      	beq.n	15f2 <MSS_I2C_init+0x9e>
        this_i2c->irqn = I2C1_IRQn;
        this_i2c->hw_reg = I2C1;
        this_i2c->hw_reg_bit = I2C1_BITBAND;
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
    158c:	f441 5080 	orr.w	r0, r1, #4096	; 0x1000
    1590:	f2ce 0200 	movt	r2, #57344	; 0xe000
    1594:	2180      	movs	r1, #128	; 0x80
    1596:	6498      	str	r0, [r3, #72]	; 0x48
    1598:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
    159c:	6c98      	ldr	r0, [r3, #72]	; 0x48
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
        this_i2c->hw_reg = I2C1;
    159e:	f242 0100 	movw	r1, #8192	; 0x2000
        this_i2c->hw_reg_bit = I2C1_BITBAND;
    15a2:	f240 0200 	movw	r2, #0
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
    15a6:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
        this_i2c->hw_reg = I2C1;
        this_i2c->hw_reg_bit = I2C1_BITBAND;
    15aa:	f2c4 2224 	movt	r2, #16932	; 0x4224
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
        this_i2c->hw_reg = I2C1;
    15ae:	f2c4 0101 	movt	r1, #16385	; 0x4001
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
    15b2:	6498      	str	r0, [r3, #72]	; 0x48
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
    15b4:	2307      	movs	r3, #7
    15b6:	7463      	strb	r3, [r4, #17]
        this_i2c->hw_reg = I2C1;
    15b8:	6161      	str	r1, [r4, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
    15ba:	61a2      	str	r2, [r4, #24]
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
    15bc:	4690      	mov	r8, r2
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
    15be:	69a3      	ldr	r3, [r4, #24]
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
    15c0:	007f      	lsls	r7, r7, #1

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
    15c2:	6961      	ldr	r1, [r4, #20]
    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
    15c4:	f005 0001 	and.w	r0, r5, #1
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
    15c8:	f3c5 0c80 	ubfx	ip, r5, #2, #1
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
    15cc:	fa5f fe87 	uxtb.w	lr, r7

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
    15d0:	f3c5 0540 	ubfx	r5, r5, #1, #1
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
    15d4:	2201      	movs	r2, #1
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
    15d6:	f8c3 c01c 	str.w	ip, [r3, #28]
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
    15da:	f8c4 801c 	str.w	r8, [r4, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
    15de:	605d      	str	r5, [r3, #4]
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
    15e0:	6027      	str	r7, [r4, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
    15e2:	6018      	str	r0, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
    15e4:	f881 e00c 	strb.w	lr, [r1, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
    15e8:	619a      	str	r2, [r3, #24]
    15ea:	f386 8810 	msr	PRIMASK, r6
    restore_interrupts( primask );
}
    15ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        this_i2c->irqn = I2C0_IRQn;
        this_i2c->hw_reg = I2C0;
        this_i2c->hw_reg_bit = I2C0_BITBAND;
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
    15f2:	f441 6000 	orr.w	r0, r1, #2048	; 0x800
    15f6:	f2ce 0200 	movt	r2, #57344	; 0xe000
    15fa:	2110      	movs	r1, #16
    15fc:	6498      	str	r0, [r3, #72]	; 0x48
    15fe:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    1602:	6c98      	ldr	r0, [r3, #72]	; 0x48
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
    
    if ( this_i2c == &g_mss_i2c0 )
    {
        this_i2c->irqn = I2C0_IRQn;
        this_i2c->hw_reg = I2C0;
    1604:	f242 0100 	movw	r1, #8192	; 0x2000
        this_i2c->hw_reg_bit = I2C0_BITBAND;
    1608:	f240 0200 	movw	r2, #0
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    160c:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    
    if ( this_i2c == &g_mss_i2c0 )
    {
        this_i2c->irqn = I2C0_IRQn;
        this_i2c->hw_reg = I2C0;
        this_i2c->hw_reg_bit = I2C0_BITBAND;
    1610:	f2c4 2204 	movt	r2, #16900	; 0x4204
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
    
    if ( this_i2c == &g_mss_i2c0 )
    {
        this_i2c->irqn = I2C0_IRQn;
        this_i2c->hw_reg = I2C0;
    1614:	f2c4 0100 	movt	r1, #16384	; 0x4000
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    1618:	6498      	str	r0, [r3, #72]	; 0x48
    primask = disable_interrupts();
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
    
    if ( this_i2c == &g_mss_i2c0 )
    {
        this_i2c->irqn = I2C0_IRQn;
    161a:	2304      	movs	r3, #4
    161c:	7463      	strb	r3, [r4, #17]
        this_i2c->hw_reg = I2C0;
    161e:	6161      	str	r1, [r4, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
    1620:	61a2      	str	r2, [r4, #24]
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    1622:	4690      	mov	r8, r2
    1624:	e7cb      	b.n	15be <MSS_I2C_init+0x6a>
    1626:	bf00      	nop

00001628 <SystemCoreClockUpdate>:
#define FREQ_1MHZ    1000000u
#define FREQ_25MHZ   25000000u
#define FREQ_50MHZ   50000000u

void SystemCoreClockUpdate(void)
{
    1628:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    uint32_t controller_pll_init;
    uint32_t clk_src;

    controller_pll_init = SYSREG->MSSDDR_FACC1_CR & CONTROLLER_PLL_INIT_MASK;
    162c:	f248 0300 	movw	r3, #32768	; 0x8000
    1630:	f2c4 0303 	movt	r3, #16387	; 0x4003
    1634:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
#define FREQ_1MHZ    1000000u
#define FREQ_25MHZ   25000000u
#define FREQ_50MHZ   50000000u

void SystemCoreClockUpdate(void)
{
    1638:	b083      	sub	sp, #12
    uint32_t controller_pll_init;
    uint32_t clk_src;

    controller_pll_init = SYSREG->MSSDDR_FACC1_CR & CONTROLLER_PLL_INIT_MASK;

    if(0u == controller_pll_init)
    163a:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
    163e:	d119      	bne.n	1674 <SystemCoreClockUpdate+0x4c>
    {
        /* Normal operations. */
        uint32_t global_mux_sel;

        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
    1640:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
        if(0u == global_mux_sel)
    1644:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    1648:	d04a      	beq.n	16e0 <SystemCoreClockUpdate+0xb8>
                                                   RCOSC_25_50MHZ_CLK_SRC,
                                                   CLK_XTAL_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC };
    164a:	f641 1c4c 	movw	ip, #6476	; 0x194c
    164e:	f2c0 0c00 	movt	ip, #0
    1652:	466a      	mov	r2, sp
    1654:	e89c 0003 	ldmia.w	ip, {r0, r1}
    1658:	e882 0003 	stmia.w	r2, {r0, r1}

            uint32_t standby_sel;
            uint8_t clock_source;

            standby_sel = (SYSREG->MSSDDR_FACC2_CR >> FACC_STANDBY_SHIFT) & FACC_STANDBY_SEL_MASK;
    165c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
            clock_source = standby_clock_lut[standby_sel];
            switch(clock_source)
    1660:	af02      	add	r7, sp, #8
    1662:	f3c1 1682 	ubfx	r6, r1, #6, #3
    1666:	19bd      	adds	r5, r7, r6
    1668:	f815 4c08 	ldrb.w	r4, [r5, #-8]
    166c:	2c01      	cmp	r4, #1
    166e:	f000 8096 	beq.w	179e <SystemCoreClockUpdate+0x176>
    1672:	d267      	bcs.n	1744 <SystemCoreClockUpdate+0x11c>
static uint32_t get_rcosc_25_50mhz_frequency(void)
{
    uint32_t rcosc_div2;
    uint32_t rcosc_frequency;

    rcosc_div2 = SYSREG->MSSDDR_PLL_STATUS & RCOSC_DIV2_MASK;
    1674:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
    if(0u == rcosc_div2)
    1678:	f647 0240 	movw	r2, #30784	; 0x7840
    167c:	f24f 0380 	movw	r3, #61568	; 0xf080
    1680:	f2c0 127d 	movt	r2, #381	; 0x17d
    1684:	f014 0f04 	tst.w	r4, #4
    1688:	f2c0 23fa 	movt	r3, #762	; 0x2fa
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    168c:	f240 0620 	movw	r6, #32
    g_FrequencyPCLK0 = standby_clk;
    1690:	f240 0518 	movw	r5, #24
    g_FrequencyPCLK1 = standby_clk;
    1694:	f240 041c 	movw	r4, #28
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    1698:	f240 0c0c 	movw	ip, #12
    g_FrequencyFIC0 = standby_clk;
    169c:	f240 0010 	movw	r0, #16
    g_FrequencyFIC1 = standby_clk;
    16a0:	f240 0114 	movw	r1, #20
    g_FrequencyFIC64 = standby_clk;
    16a4:	f240 0708 	movw	r7, #8
{
    uint32_t rcosc_div2;
    uint32_t rcosc_frequency;

    rcosc_div2 = SYSREG->MSSDDR_PLL_STATUS & RCOSC_DIV2_MASK;
    if(0u == rcosc_div2)
    16a8:	bf08      	it	eq
    16aa:	4613      	moveq	r3, r2
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    16ac:	f2c2 0600 	movt	r6, #8192	; 0x2000
    g_FrequencyPCLK0 = standby_clk;
    16b0:	f2c2 0500 	movt	r5, #8192	; 0x2000
    g_FrequencyPCLK1 = standby_clk;
    16b4:	f2c2 0400 	movt	r4, #8192	; 0x2000
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    16b8:	f2c2 0c00 	movt	ip, #8192	; 0x2000
    g_FrequencyFIC0 = standby_clk;
    16bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    g_FrequencyFIC1 = standby_clk;
    16c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
    g_FrequencyFIC64 = standby_clk;
    16c4:	f2c2 0700 	movt	r7, #8192	; 0x2000
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    g_FrequencyPCLK0 = standby_clk;
    g_FrequencyPCLK1 = standby_clk;
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    16c8:	f8cc 2000 	str.w	r2, [ip]
    g_FrequencyFIC0 = standby_clk;
    g_FrequencyFIC1 = standby_clk;
    g_FrequencyFIC64 = standby_clk;
    16cc:	603b      	str	r3, [r7, #0]
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    16ce:	6033      	str	r3, [r6, #0]
    g_FrequencyPCLK0 = standby_clk;
    16d0:	602b      	str	r3, [r5, #0]
    g_FrequencyPCLK1 = standby_clk;
    16d2:	6023      	str	r3, [r4, #0]
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    g_FrequencyFIC0 = standby_clk;
    16d4:	6003      	str	r3, [r0, #0]
    g_FrequencyFIC1 = standby_clk;
    16d6:	600b      	str	r3, [r1, #0]
    {
        /* PLL initialization mode. Running from 25/50MHZ RC oscillator. */
        clk_src = get_rcosc_25_50mhz_frequency();
        set_clock_frequency_globals(clk_src);
    }
}
    16d8:	b003      	add	sp, #12
    16da:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    16de:	4770      	bx	lr

        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
        if(0u == global_mux_sel)
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
    16e0:	f240 0520 	movw	r5, #32
    16e4:	f24e 1300 	movw	r3, #57600	; 0xe100
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
    16e8:	f240 0418 	movw	r4, #24
    16ec:	f24f 0280 	movw	r2, #61568	; 0xf080
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
    16f0:	f240 081c 	movw	r8, #28
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    16f4:	f240 070c 	movw	r7, #12
    16f8:	f647 0c40 	movw	ip, #30784	; 0x7840
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
    16fc:	f240 0010 	movw	r0, #16
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
    1700:	f240 0114 	movw	r1, #20
            g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
    1704:	f240 0608 	movw	r6, #8

        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
        if(0u == global_mux_sel)
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
    1708:	f2c0 53f5 	movt	r3, #1525	; 0x5f5
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
    170c:	f2c0 22fa 	movt	r2, #762	; 0x2fa

        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
        if(0u == global_mux_sel)
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
    1710:	f2c2 0500 	movt	r5, #8192	; 0x2000
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
    1714:	f2c2 0400 	movt	r4, #8192	; 0x2000
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
    1718:	f2c2 0800 	movt	r8, #8192	; 0x2000
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    171c:	f2c2 0700 	movt	r7, #8192	; 0x2000
    1720:	f2c0 1c7d 	movt	ip, #381	; 0x17d
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
    1724:	f2c2 0000 	movt	r0, #8192	; 0x2000
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
    1728:	f2c2 0100 	movt	r1, #8192	; 0x2000
            g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
    172c:	f2c2 0600 	movt	r6, #8192	; 0x2000
        if(0u == global_mux_sel)
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
    1730:	f8c8 2000 	str.w	r2, [r8]
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    1734:	f8c7 c000 	str.w	ip, [r7]
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
            g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
    1738:	6033      	str	r3, [r6, #0]

        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
        if(0u == global_mux_sel)
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
    173a:	602b      	str	r3, [r5, #0]
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
    173c:	6022      	str	r2, [r4, #0]
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
    173e:	6003      	str	r3, [r0, #0]
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
    1740:	600b      	str	r3, [r1, #0]
    1742:	e7c9      	b.n	16d8 <SystemCoreClockUpdate+0xb0>
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    1744:	f240 0520 	movw	r5, #32
    1748:	f244 2340 	movw	r3, #16960	; 0x4240
    g_FrequencyPCLK0 = standby_clk;
    174c:	f240 0418 	movw	r4, #24
    g_FrequencyPCLK1 = standby_clk;
    1750:	f240 001c 	movw	r0, #28
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    1754:	f240 070c 	movw	r7, #12
    1758:	f647 0c40 	movw	ip, #30784	; 0x7840
    g_FrequencyFIC0 = standby_clk;
    175c:	f240 0110 	movw	r1, #16
    g_FrequencyFIC1 = standby_clk;
    1760:	f240 0214 	movw	r2, #20
    g_FrequencyFIC64 = standby_clk;
    1764:	f240 0608 	movw	r6, #8
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    1768:	f2c0 030f 	movt	r3, #15
    176c:	f2c2 0500 	movt	r5, #8192	; 0x2000
    g_FrequencyPCLK0 = standby_clk;
    1770:	f2c2 0400 	movt	r4, #8192	; 0x2000
    g_FrequencyPCLK1 = standby_clk;
    1774:	f2c2 0000 	movt	r0, #8192	; 0x2000
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    1778:	f2c2 0700 	movt	r7, #8192	; 0x2000
    177c:	f2c0 1c7d 	movt	ip, #381	; 0x17d
    g_FrequencyFIC0 = standby_clk;
    1780:	f2c2 0100 	movt	r1, #8192	; 0x2000
    g_FrequencyFIC1 = standby_clk;
    1784:	f2c2 0200 	movt	r2, #8192	; 0x2000
    g_FrequencyFIC64 = standby_clk;
    1788:	f2c2 0600 	movt	r6, #8192	; 0x2000
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    g_FrequencyPCLK0 = standby_clk;
    g_FrequencyPCLK1 = standby_clk;
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    178c:	f8c7 c000 	str.w	ip, [r7]
    g_FrequencyFIC0 = standby_clk;
    g_FrequencyFIC1 = standby_clk;
    g_FrequencyFIC64 = standby_clk;
    1790:	6033      	str	r3, [r6, #0]
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    1792:	602b      	str	r3, [r5, #0]
    g_FrequencyPCLK0 = standby_clk;
    1794:	6023      	str	r3, [r4, #0]
    g_FrequencyPCLK1 = standby_clk;
    1796:	6003      	str	r3, [r0, #0]
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    g_FrequencyFIC0 = standby_clk;
    1798:	600b      	str	r3, [r1, #0]
    g_FrequencyFIC1 = standby_clk;
    179a:	6013      	str	r3, [r2, #0]
    179c:	e79c      	b.n	16d8 <SystemCoreClockUpdate+0xb0>
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    179e:	f240 0520 	movw	r5, #32
    g_FrequencyPCLK0 = standby_clk;
    17a2:	f240 0418 	movw	r4, #24
    g_FrequencyPCLK1 = standby_clk;
    17a6:	f240 001c 	movw	r0, #28
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    17aa:	f240 070c 	movw	r7, #12
    17ae:	f647 0c40 	movw	ip, #30784	; 0x7840
    g_FrequencyFIC0 = standby_clk;
    17b2:	f240 0110 	movw	r1, #16
    g_FrequencyFIC1 = standby_clk;
    17b6:	f240 0214 	movw	r2, #20
    g_FrequencyFIC64 = standby_clk;
    17ba:	f240 0608 	movw	r6, #8
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    17be:	f2c2 0500 	movt	r5, #8192	; 0x2000
    g_FrequencyPCLK0 = standby_clk;
    17c2:	f2c2 0400 	movt	r4, #8192	; 0x2000
    g_FrequencyPCLK1 = standby_clk;
    17c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    17ca:	f2c2 0700 	movt	r7, #8192	; 0x2000
    17ce:	f2c0 1c7d 	movt	ip, #381	; 0x17d
    g_FrequencyFIC0 = standby_clk;
    17d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
    g_FrequencyFIC1 = standby_clk;
    17d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    g_FrequencyFIC64 = standby_clk;
    17da:	f2c2 0600 	movt	r6, #8192	; 0x2000
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
    SystemCoreClock = standby_clk;
    17de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    17e2:	e7d3      	b.n	178c <SystemCoreClockUpdate+0x164>

000017e4 <SystemInit>:
static uint32_t get_silicon_revision(void)
{
    uint32_t silicon_revision;
    uint32_t device_version;

    device_version = SYSREG->DEVICE_VERSION;
    17e4:	f248 0300 	movw	r3, #32768	; 0x8000
    17e8:	f2c4 0303 	movt	r3, #16387	; 0x4003
    17ec:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    switch(device_version)
    17f0:	f64f 0202 	movw	r2, #63490	; 0xf802
    17f4:	4291      	cmp	r1, r2
    17f6:	d10b      	bne.n	1810 <SystemInit+0x2c>
{
    /*--------------------------------------------------------------------------
     * Work around a couple of silicon issues:
     */
    /* DDR_CLK_EN <- 1 */
    SYSREG->MSSDDR_FACC1_CR |= (uint32_t)1 << DDR_CLK_EN_SHIFT;
    17f8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    17fc:	f440 7280 	orr.w	r2, r0, #256	; 0x100
    1800:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    /* CONTROLLER_PLL_INIT <- 0 */
    SYSREG->MSSDDR_FACC1_CR = SYSREG->MSSDDR_FACC1_CR & ~CONTROLLER_PLL_INIT_MASK;
    1804:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    1808:	f021 6080 	bic.w	r0, r1, #67108864	; 0x4000000
    180c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
    /*--------------------------------------------------------------------------
     * Set STKALIGN to ensure exception stacking starts on 8 bytes address
     * boundary. This ensures compliance with the "Procedure Call Standards for
     * the ARM Architecture" (AAPCS).
     */
    SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    1810:	f64e 5300 	movw	r3, #60672	; 0xed00
    1814:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1818:	695a      	ldr	r2, [r3, #20]
    181a:	f442 7100 	orr.w	r1, r2, #512	; 0x200
    181e:	6159      	str	r1, [r3, #20]
#endif

    /*--------------------------------------------------------------------------
     * Call user defined configuration function.
     */
    mscc_post_hw_cfg_init();
    1820:	f7fe be08 	b.w	434 <mscc_post_hw_cfg_init>

00001824 <__libc_init_array>:
    1824:	b570      	push	{r4, r5, r6, lr}
    1826:	f641 166c 	movw	r6, #6508	; 0x196c
    182a:	f641 156c 	movw	r5, #6508	; 0x196c
    182e:	f2c0 0600 	movt	r6, #0
    1832:	f2c0 0500 	movt	r5, #0
    1836:	1b76      	subs	r6, r6, r5
    1838:	10b6      	asrs	r6, r6, #2
    183a:	d006      	beq.n	184a <__libc_init_array+0x26>
    183c:	2400      	movs	r4, #0
    183e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    1842:	3401      	adds	r4, #1
    1844:	4798      	blx	r3
    1846:	42a6      	cmp	r6, r4
    1848:	d8f9      	bhi.n	183e <__libc_init_array+0x1a>
    184a:	f641 156c 	movw	r5, #6508	; 0x196c
    184e:	f641 1670 	movw	r6, #6512	; 0x1970
    1852:	f2c0 0500 	movt	r5, #0
    1856:	f2c0 0600 	movt	r6, #0
    185a:	1b76      	subs	r6, r6, r5
    185c:	f000 f87a 	bl	1954 <_init>
    1860:	10b6      	asrs	r6, r6, #2
    1862:	d006      	beq.n	1872 <__libc_init_array+0x4e>
    1864:	2400      	movs	r4, #0
    1866:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    186a:	3401      	adds	r4, #1
    186c:	4798      	blx	r3
    186e:	42a6      	cmp	r6, r4
    1870:	d8f9      	bhi.n	1866 <__libc_init_array+0x42>
    1872:	bd70      	pop	{r4, r5, r6, pc}

00001874 <memset>:
    1874:	2a03      	cmp	r2, #3
    1876:	b2c9      	uxtb	r1, r1
    1878:	b430      	push	{r4, r5}
    187a:	d807      	bhi.n	188c <memset+0x18>
    187c:	b122      	cbz	r2, 1888 <memset+0x14>
    187e:	2300      	movs	r3, #0
    1880:	54c1      	strb	r1, [r0, r3]
    1882:	3301      	adds	r3, #1
    1884:	4293      	cmp	r3, r2
    1886:	d1fb      	bne.n	1880 <memset+0xc>
    1888:	bc30      	pop	{r4, r5}
    188a:	4770      	bx	lr
    188c:	eb00 0c02 	add.w	ip, r0, r2
    1890:	4603      	mov	r3, r0
    1892:	e001      	b.n	1898 <memset+0x24>
    1894:	f803 1c01 	strb.w	r1, [r3, #-1]
    1898:	f003 0403 	and.w	r4, r3, #3
    189c:	461a      	mov	r2, r3
    189e:	3301      	adds	r3, #1
    18a0:	2c00      	cmp	r4, #0
    18a2:	d1f7      	bne.n	1894 <memset+0x20>
    18a4:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    18a8:	ebc2 040c 	rsb	r4, r2, ip
    18ac:	fb03 f301 	mul.w	r3, r3, r1
    18b0:	e01f      	b.n	18f2 <memset+0x7e>
    18b2:	f842 3c40 	str.w	r3, [r2, #-64]
    18b6:	f842 3c3c 	str.w	r3, [r2, #-60]
    18ba:	f842 3c38 	str.w	r3, [r2, #-56]
    18be:	f842 3c34 	str.w	r3, [r2, #-52]
    18c2:	f842 3c30 	str.w	r3, [r2, #-48]
    18c6:	f842 3c2c 	str.w	r3, [r2, #-44]
    18ca:	f842 3c28 	str.w	r3, [r2, #-40]
    18ce:	f842 3c24 	str.w	r3, [r2, #-36]
    18d2:	f842 3c20 	str.w	r3, [r2, #-32]
    18d6:	f842 3c1c 	str.w	r3, [r2, #-28]
    18da:	f842 3c18 	str.w	r3, [r2, #-24]
    18de:	f842 3c14 	str.w	r3, [r2, #-20]
    18e2:	f842 3c10 	str.w	r3, [r2, #-16]
    18e6:	f842 3c0c 	str.w	r3, [r2, #-12]
    18ea:	f842 3c08 	str.w	r3, [r2, #-8]
    18ee:	f842 3c04 	str.w	r3, [r2, #-4]
    18f2:	4615      	mov	r5, r2
    18f4:	3240      	adds	r2, #64	; 0x40
    18f6:	2c3f      	cmp	r4, #63	; 0x3f
    18f8:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
    18fc:	dcd9      	bgt.n	18b2 <memset+0x3e>
    18fe:	462a      	mov	r2, r5
    1900:	ebc5 040c 	rsb	r4, r5, ip
    1904:	e007      	b.n	1916 <memset+0xa2>
    1906:	f842 3c10 	str.w	r3, [r2, #-16]
    190a:	f842 3c0c 	str.w	r3, [r2, #-12]
    190e:	f842 3c08 	str.w	r3, [r2, #-8]
    1912:	f842 3c04 	str.w	r3, [r2, #-4]
    1916:	4615      	mov	r5, r2
    1918:	3210      	adds	r2, #16
    191a:	2c0f      	cmp	r4, #15
    191c:	f1a4 0410 	sub.w	r4, r4, #16
    1920:	dcf1      	bgt.n	1906 <memset+0x92>
    1922:	462a      	mov	r2, r5
    1924:	ebc5 050c 	rsb	r5, r5, ip
    1928:	e001      	b.n	192e <memset+0xba>
    192a:	f842 3c04 	str.w	r3, [r2, #-4]
    192e:	4614      	mov	r4, r2
    1930:	3204      	adds	r2, #4
    1932:	2d03      	cmp	r5, #3
    1934:	f1a5 0504 	sub.w	r5, r5, #4
    1938:	dcf7      	bgt.n	192a <memset+0xb6>
    193a:	e001      	b.n	1940 <memset+0xcc>
    193c:	f804 1b01 	strb.w	r1, [r4], #1
    1940:	4564      	cmp	r4, ip
    1942:	d3fb      	bcc.n	193c <memset+0xc8>
    1944:	e7a0      	b.n	1888 <memset+0x14>
    1946:	bf00      	nop
    1948:	00000046 	.word	0x00000046

0000194c <C.16.3514>:
    194c:	01000100 03030202                       ........

00001954 <_init>:
    1954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1956:	bf00      	nop
    1958:	bcf8      	pop	{r3, r4, r5, r6, r7}
    195a:	bc08      	pop	{r3}
    195c:	469e      	mov	lr, r3
    195e:	4770      	bx	lr

00001960 <_fini>:
    1960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1962:	bf00      	nop
    1964:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1966:	bc08      	pop	{r3}
    1968:	469e      	mov	lr, r3
    196a:	4770      	bx	lr

0000196c <__frame_dummy_init_array_entry>:
    196c:	04d5 0000                                   ....

00001970 <__do_global_dtors_aux_fini_array_entry>:
    1970:	04c1 0000 0000 0000 0000 0000 0000 0000     ................
